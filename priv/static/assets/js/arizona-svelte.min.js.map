{"version":3,"file":"arizona-svelte.min.js","sources":["../../../../assets/js/arizona-svelte-registry.js","../../../../node_modules/esm-env/false.js","../../../../node_modules/svelte/src/internal/shared/utils.js","../../../../node_modules/svelte/src/internal/client/constants.js","../../../../node_modules/svelte/src/internal/client/errors.js","../../../../node_modules/svelte/src/constants.js","../../../../node_modules/svelte/src/internal/client/warnings.js","../../../../node_modules/svelte/src/internal/client/reactivity/equality.js","../../../../node_modules/svelte/src/internal/flags/index.js","../../../../node_modules/svelte/src/internal/client/context.js","../../../../node_modules/svelte/src/internal/client/dom/task.js","../../../../node_modules/svelte/src/internal/client/error-handling.js","../../../../node_modules/svelte/src/internal/client/reactivity/batch.js","../../../../node_modules/svelte/src/reactivity/create-subscriber.js","../../../../node_modules/svelte/src/internal/client/dom/blocks/boundary.js","../../../../node_modules/svelte/src/internal/client/reactivity/deriveds.js","../../../../node_modules/svelte/src/internal/client/reactivity/sources.js","../../../../node_modules/svelte/src/internal/client/proxy.js","../../../../node_modules/svelte/src/internal/client/dom/operations.js","../../../../node_modules/svelte/src/internal/client/dom/elements/bindings/shared.js","../../../../node_modules/svelte/src/internal/client/reactivity/effects.js","../../../../node_modules/svelte/src/internal/client/runtime.js","../../../../node_modules/svelte/src/utils.js","../../../../node_modules/svelte/src/internal/client/dom/elements/events.js","../../../../node_modules/svelte/src/internal/client/render.js","../../../../assets/js/arizona-svelte-lifecycle.js","../../../../assets/js/arizona-svelte.js"],"sourcesContent":["/**\n * Svelte Component Registry\n * Manages registration and retrieval of Svelte components\n *\n * @example\n * const registry = new ArizonaSvelteRegistry();\n * registry.registerComponent('Counter', CounterComponent);\n * const component = registry.getComponent('Counter');\n */\n\n/**\n * Registry for managing Svelte components\n */\nclass ArizonaSvelteRegistry {\n  /**\n   * Create a new component registry\n   */\n  constructor() {\n    this.components = new Map();\n  }\n\n  /**\n   * Register a component with the given name\n   * @param {string} name - Component name\n   * @param {Function} component - Svelte component class\n   */\n  registerComponent(name, component) {\n    if (typeof name !== 'string' || !name.trim()) {\n      throw new Error('Component name must be a non-empty string');\n    }\n\n    if (typeof component !== 'function') {\n      throw new Error('Component must be a Svelte component class');\n    }\n\n    this.components.set(name, component);\n  }\n\n  /**\n   * Get a component by name\n   * @param {string} name - Component name\n   * @returns {Function|null} Svelte component class or null if not found\n   */\n  getComponent(name) {\n    return this.components.get(name) || null;\n  }\n\n  /**\n   * Check if a component is registered\n   * @param {string} name - Component name\n   * @returns {boolean}\n   */\n  hasComponent(name) {\n    return this.components.has(name);\n  }\n\n  /**\n   * Get all registered component names\n   * @returns {string[]}\n   */\n  getComponentNames() {\n    return Array.from(this.components.keys());\n  }\n\n  /**\n   * Unregister a component\n   * @param {string} name - Component name\n   * @returns {boolean} True if component was removed, false if it didn't exist\n   */\n  unregisterComponent(name) {\n    return this.components.delete(name);\n  }\n\n  /**\n   * Register multiple components at once\n   * @param {Object.<string, Function>} components - Object mapping component names to component classes\n   * @returns {number} Number of components registered\n   * @example\n   * registry.registerComponents({\n   *   Counter: CounterComponent,\n   *   HelloWorld: HelloWorldComponent,\n   *   Dashboard: DashboardComponent\n   * });\n   */\n  registerComponents(components) {\n    if (!components || typeof components !== 'object') {\n      throw new Error('Components must be an object mapping names to component classes');\n    }\n\n    let registeredCount = 0;\n    for (const [name, component] of Object.entries(components)) {\n      this.registerComponent(name, component);\n      registeredCount++;\n    }\n\n    return registeredCount;\n  }\n\n  /**\n   * Clear all registered components\n   */\n  clear() {\n    this.components.clear();\n  }\n}\n\n// Export the class only\nexport { ArizonaSvelteRegistry };\n","export default false;\n","// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var index_of = Array.prototype.indexOf;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\nexport var is_extensible = Object.isExtensible;\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\nexport const noop = () => {};\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n\n/**\n * @template [T=any]\n * @param {any} value\n * @returns {value is PromiseLike<T>}\n */\nexport function is_promise(value) {\n\treturn typeof value?.then === 'function';\n}\n\n/** @param {Function} fn */\nexport function run(fn) {\n\treturn fn();\n}\n\n/** @param {Array<() => void>} arr */\nexport function run_all(arr) {\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tarr[i]();\n\t}\n}\n\n/**\n * TODO replace with Promise.withResolvers once supported widely enough\n * @template T\n */\nexport function deferred() {\n\t/** @type {(value: T) => void} */\n\tvar resolve;\n\n\t/** @type {(reason: any) => void} */\n\tvar reject;\n\n\t/** @type {Promise<T>} */\n\tvar promise = new Promise((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\n\t// @ts-expect-error\n\treturn { promise, resolve, reject };\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {V | (() => V)} fallback\n * @param {boolean} [lazy]\n * @returns {V}\n */\nexport function fallback(value, fallback, lazy = false) {\n\treturn value === undefined\n\t\t? lazy\n\t\t\t? /** @type {() => V} */ (fallback)()\n\t\t\t: /** @type {V} */ (fallback)\n\t\t: value;\n}\n\n/**\n * When encountering a situation like `let [a, b, c] = $derived(blah())`,\n * we need to stash an intermediate value that `a`, `b`, and `c` derive\n * from, in case it's an iterable\n * @template T\n * @param {ArrayLike<T> | Iterable<T>} value\n * @param {number} [n]\n * @returns {Array<T>}\n */\nexport function to_array(value, n) {\n\t// return arrays unchanged\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\n\t// if value is not iterable, or `n` is unspecified (indicates a rest\n\t// element, which means we're not concerned about unbounded iterables)\n\t// convert to an array with `Array.from`\n\tif (n === undefined || !(Symbol.iterator in value)) {\n\t\treturn Array.from(value);\n\t}\n\n\t// otherwise, populate an array with `n` values\n\n\t/** @type {T[]} */\n\tconst array = [];\n\n\tfor (const element of value) {\n\t\tarray.push(element);\n\t\tif (array.length === n) break;\n\t}\n\n\treturn array;\n}\n","export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const BOUNDARY_EFFECT = 1 << 7;\nexport const UNOWNED = 1 << 8;\nexport const DISCONNECTED = 1 << 9;\nexport const CLEAN = 1 << 10;\nexport const DIRTY = 1 << 11;\nexport const MAYBE_DIRTY = 1 << 12;\nexport const INERT = 1 << 13;\nexport const DESTROYED = 1 << 14;\nexport const EFFECT_RAN = 1 << 15;\n/** 'Transparent' effects do not create a transition boundary */\nexport const EFFECT_TRANSPARENT = 1 << 16;\nexport const INSPECT_EFFECT = 1 << 17;\nexport const HEAD_EFFECT = 1 << 18;\nexport const EFFECT_PRESERVED = 1 << 19;\nexport const USER_EFFECT = 1 << 20;\n\n// Flags used for async\nexport const REACTION_IS_UPDATING = 1 << 21;\nexport const ASYNC = 1 << 22;\n\nexport const ERROR_VALUE = 1 << 23;\n\nexport const STATE_SYMBOL = Symbol('$state');\nexport const LEGACY_PROPS = Symbol('legacy props');\nexport const LOADING_ATTR_SYMBOL = Symbol('');\nexport const PROXY_PATH_SYMBOL = Symbol('proxy path');\n\n/** allow users to ignore aborted signal errors if `reason.name === 'StaleReactionError` */\nexport const STALE_REACTION = new (class StaleReactionError extends Error {\n\tname = 'StaleReactionError';\n\tmessage = 'The reaction that called `getAbortSignal()` was re-run or destroyed';\n})();\n\nexport const ELEMENT_NODE = 1;\nexport const TEXT_NODE = 3;\nexport const COMMENT_NODE = 8;\nexport const DOCUMENT_FRAGMENT_NODE = 11;\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\nexport *  from '../shared/errors.js';\n\n/**\n * Cannot create a `$derived(...)` with an `await` expression outside of an effect tree\n * @returns {never}\n */\nexport function async_derived_orphan() {\n\tif (DEV) {\n\t\tconst error = new Error(`async_derived_orphan\\nCannot create a \\`$derived(...)\\` with an \\`await\\` expression outside of an effect tree\\nhttps://svelte.dev/e/async_derived_orphan`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/async_derived_orphan`);\n\t}\n}\n\n/**\n * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\n * @returns {never}\n */\nexport function bind_invalid_checkbox_value() {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_checkbox_value\\nUsing \\`bind:value\\` together with a checkbox input is not allowed. Use \\`bind:checked\\` instead\\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);\n\t}\n}\n\n/**\n * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\n * @param {string} component\n * @param {string} key\n * @param {string} name\n * @returns {never}\n */\nexport function bind_invalid_export(component, key, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_export\\nComponent ${component} has an export named \\`${key}\\` that a consumer component is trying to access using \\`bind:${key}\\`, which is disallowed. Instead, use \\`bind:this\\` (e.g. \\`<${name} bind:this={component} />\\`) and then access the property on the bound component instance (e.g. \\`component.${key}\\`)\\nhttps://svelte.dev/e/bind_invalid_export`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_export`);\n\t}\n}\n\n/**\n * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\n * @param {string} key\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function bind_not_bindable(key, component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_not_bindable\\nA component is attempting to bind to a non-bindable property \\`${key}\\` belonging to ${component} (i.e. \\`<${name} bind:${key}={...}>\\`). To mark a property as bindable: \\`let { ${key} = $bindable() } = $props()\\`\\nhttps://svelte.dev/e/bind_not_bindable`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_not_bindable`);\n\t}\n}\n\n/**\n * Calling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5\n * @param {string} method\n * @param {string} component\n * @returns {never}\n */\nexport function component_api_changed(method, component) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_changed\\nCalling \\`${method}\\` on a component instance (of ${component}) is no longer valid in Svelte 5\\nhttps://svelte.dev/e/component_api_changed`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_changed`);\n\t}\n}\n\n/**\n * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function component_api_invalid_new(component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_invalid_new\\nAttempted to instantiate ${component} with \\`new ${name}\\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \\`compatibility.componentApi\\` compiler option to \\`4\\` to keep it working.\\nhttps://svelte.dev/e/component_api_invalid_new`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_invalid_new`);\n\t}\n}\n\n/**\n * A derived value cannot reference itself recursively\n * @returns {never}\n */\nexport function derived_references_self() {\n\tif (DEV) {\n\t\tconst error = new Error(`derived_references_self\\nA derived value cannot reference itself recursively\\nhttps://svelte.dev/e/derived_references_self`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/derived_references_self`);\n\t}\n}\n\n/**\n * Keyed each block has duplicate key `%value%` at indexes %a% and %b%\n * @param {string} a\n * @param {string} b\n * @param {string | undefined | null} [value]\n * @returns {never}\n */\nexport function each_key_duplicate(a, b, value) {\n\tif (DEV) {\n\t\tconst error = new Error(`each_key_duplicate\\n${value\n\t\t\t? `Keyed each block has duplicate key \\`${value}\\` at indexes ${a} and ${b}`\n\t\t\t: `Keyed each block has duplicate key at indexes ${a} and ${b}`}\\nhttps://svelte.dev/e/each_key_duplicate`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/each_key_duplicate`);\n\t}\n}\n\n/**\n * `%rune%` cannot be used inside an effect cleanup function\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_in_teardown(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_teardown\\n\\`${rune}\\` cannot be used inside an effect cleanup function\\nhttps://svelte.dev/e/effect_in_teardown`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_teardown`);\n\t}\n}\n\n/**\n * Effect cannot be created inside a `$derived` value that was not itself created inside an effect\n * @returns {never}\n */\nexport function effect_in_unowned_derived() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_unowned_derived\\nEffect cannot be created inside a \\`$derived\\` value that was not itself created inside an effect\\nhttps://svelte.dev/e/effect_in_unowned_derived`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_unowned_derived`);\n\t}\n}\n\n/**\n * `%rune%` can only be used inside an effect (e.g. during component initialisation)\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_orphan(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_orphan\\n\\`${rune}\\` can only be used inside an effect (e.g. during component initialisation)\\nhttps://svelte.dev/e/effect_orphan`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_orphan`);\n\t}\n}\n\n/**\n * `$effect.pending()` can only be called inside an effect or derived\n * @returns {never}\n */\nexport function effect_pending_outside_reaction() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_pending_outside_reaction\\n\\`$effect.pending()\\` can only be called inside an effect or derived\\nhttps://svelte.dev/e/effect_pending_outside_reaction`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_pending_outside_reaction`);\n\t}\n}\n\n/**\n * Maximum update depth exceeded. This typically indicates that an effect reads and writes the same piece of state\n * @returns {never}\n */\nexport function effect_update_depth_exceeded() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_update_depth_exceeded\\nMaximum update depth exceeded. This typically indicates that an effect reads and writes the same piece of state\\nhttps://svelte.dev/e/effect_update_depth_exceeded`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\n\t}\n}\n\n/**\n * Cannot use `flushSync` inside an effect\n * @returns {never}\n */\nexport function flush_sync_in_effect() {\n\tif (DEV) {\n\t\tconst error = new Error(`flush_sync_in_effect\\nCannot use \\`flushSync\\` inside an effect\\nhttps://svelte.dev/e/flush_sync_in_effect`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/flush_sync_in_effect`);\n\t}\n}\n\n/**\n * `getAbortSignal()` can only be called inside an effect or derived\n * @returns {never}\n */\nexport function get_abort_signal_outside_reaction() {\n\tif (DEV) {\n\t\tconst error = new Error(`get_abort_signal_outside_reaction\\n\\`getAbortSignal()\\` can only be called inside an effect or derived\\nhttps://svelte.dev/e/get_abort_signal_outside_reaction`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/get_abort_signal_outside_reaction`);\n\t}\n}\n\n/**\n * Failed to hydrate the application\n * @returns {never}\n */\nexport function hydration_failed() {\n\tif (DEV) {\n\t\tconst error = new Error(`hydration_failed\\nFailed to hydrate the application\\nhttps://svelte.dev/e/hydration_failed`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/hydration_failed`);\n\t}\n}\n\n/**\n * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\n * @returns {never}\n */\nexport function invalid_snippet() {\n\tif (DEV) {\n\t\tconst error = new Error(`invalid_snippet\\nCould not \\`{@render}\\` snippet due to the expression being \\`null\\` or \\`undefined\\`. Consider using optional chaining \\`{@render snippet?.()}\\`\\nhttps://svelte.dev/e/invalid_snippet`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet`);\n\t}\n}\n\n/**\n * `%name%(...)` cannot be used in runes mode\n * @param {string} name\n * @returns {never}\n */\nexport function lifecycle_legacy_only(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`lifecycle_legacy_only\\n\\`${name}(...)\\` cannot be used in runes mode\\nhttps://svelte.dev/e/lifecycle_legacy_only`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_legacy_only`);\n\t}\n}\n\n/**\n * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value\n * @param {string} key\n * @returns {never}\n */\nexport function props_invalid_value(key) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_invalid_value\\nCannot do \\`bind:${key}={undefined}\\` when \\`${key}\\` has a fallback value\\nhttps://svelte.dev/e/props_invalid_value`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_invalid_value`);\n\t}\n}\n\n/**\n * Rest element properties of `$props()` such as `%property%` are readonly\n * @param {string} property\n * @returns {never}\n */\nexport function props_rest_readonly(property) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_rest_readonly\\nRest element properties of \\`$props()\\` such as \\`${property}\\` are readonly\\nhttps://svelte.dev/e/props_rest_readonly`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_rest_readonly`);\n\t}\n}\n\n/**\n * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\n * @param {string} rune\n * @returns {never}\n */\nexport function rune_outside_svelte(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`rune_outside_svelte\\nThe \\`${rune}\\` rune is only available inside \\`.svelte\\` and \\`.svelte.js/ts\\` files\\nhttps://svelte.dev/e/rune_outside_svelte`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/rune_outside_svelte`);\n\t}\n}\n\n/**\n * `setContext` must be called when a component first initializes, not in a subsequent effect or after an `await` expression\n * @returns {never}\n */\nexport function set_context_after_init() {\n\tif (DEV) {\n\t\tconst error = new Error(`set_context_after_init\\n\\`setContext\\` must be called when a component first initializes, not in a subsequent effect or after an \\`await\\` expression\\nhttps://svelte.dev/e/set_context_after_init`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/set_context_after_init`);\n\t}\n}\n\n/**\n * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\n * @returns {never}\n */\nexport function state_descriptors_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_descriptors_fixed\\nProperty descriptors defined on \\`$state\\` objects must contain \\`value\\` and always be \\`enumerable\\`, \\`configurable\\` and \\`writable\\`.\\nhttps://svelte.dev/e/state_descriptors_fixed`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_descriptors_fixed`);\n\t}\n}\n\n/**\n * Cannot set prototype of `$state` object\n * @returns {never}\n */\nexport function state_prototype_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_prototype_fixed\\nCannot set prototype of \\`$state\\` object\\nhttps://svelte.dev/e/state_prototype_fixed`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_prototype_fixed`);\n\t}\n}\n\n/**\n * Updating state inside `$derived(...)`, `$inspect(...)` or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\n * @returns {never}\n */\nexport function state_unsafe_mutation() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_unsafe_mutation\\nUpdating state inside \\`$derived(...)\\`, \\`$inspect(...)\\` or a template expression is forbidden. If the value should not be reactive, declare it without \\`$state\\`\\nhttps://svelte.dev/e/state_unsafe_mutation`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_mutation`);\n\t}\n}\n\n/**\n * A `<svelte:boundary>` `reset` function cannot be called while an error is still being handled\n * @returns {never}\n */\nexport function svelte_boundary_reset_onerror() {\n\tif (DEV) {\n\t\tconst error = new Error(`svelte_boundary_reset_onerror\\nA \\`<svelte:boundary>\\` \\`reset\\` function cannot be called while an error is still being handled\\nhttps://svelte.dev/e/svelte_boundary_reset_onerror`);\n\n\t\terror.name = 'Svelte error';\n\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/svelte_boundary_reset_onerror`);\n\t}\n}","export const EACH_ITEM_REACTIVE = 1;\nexport const EACH_INDEX_REACTIVE = 1 << 1;\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\nexport const EACH_IS_CONTROLLED = 1 << 2;\nexport const EACH_IS_ANIMATED = 1 << 3;\nexport const EACH_ITEM_IMMUTABLE = 1 << 4;\n\nexport const PROPS_IS_IMMUTABLE = 1;\nexport const PROPS_IS_RUNES = 1 << 1;\nexport const PROPS_IS_UPDATED = 1 << 2;\nexport const PROPS_IS_BINDABLE = 1 << 3;\nexport const PROPS_IS_LAZY_INITIAL = 1 << 4;\n\nexport const TRANSITION_IN = 1;\nexport const TRANSITION_OUT = 1 << 1;\nexport const TRANSITION_GLOBAL = 1 << 2;\n\nexport const TEMPLATE_FRAGMENT = 1;\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\nexport const TEMPLATE_USE_SVG = 1 << 2;\nexport const TEMPLATE_USE_MATHML = 1 << 3;\n\nexport const HYDRATION_START = '[';\n/** used to indicate that an `{:else}...` block was rendered */\nexport const HYDRATION_START_ELSE = '[!';\nexport const HYDRATION_END = ']';\nexport const HYDRATION_ERROR = {};\n\nexport const ELEMENT_IS_NAMESPACED = 1;\nexport const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;\nexport const ELEMENT_IS_INPUT = 1 << 2;\n\nexport const UNINITIALIZED = Symbol();\n\n// Dev-time component properties\nexport const FILENAME = Symbol('filename');\nexport const HMR = Symbol('hmr');\n\nexport const NAMESPACE_HTML = 'http://www.w3.org/1999/xhtml';\nexport const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\nexport const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';\n\n// we use a list of ignorable runtime warnings because not every runtime warning\n// can be ignored and we want to keep the validation for svelte-ignore in place\nexport const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */ ([\n\t'await_waterfall',\n\t'await_reactivity_loss',\n\t'state_snapshot_uncloneable',\n\t'binding_property_non_reactive',\n\t'hydration_attribute_changed',\n\t'hydration_html_changed',\n\t'ownership_invalid_binding',\n\t'ownership_invalid_mutation'\n]);\n\n/**\n * Whitespace inside one of these elements will not result in\n * a whitespace node being created in any circumstances. (This\n * list is almost certainly very incomplete)\n * TODO this is currently unused\n */\nexport const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];\n\nexport const ATTACHMENT_KEY = '@attach';\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\nvar bold = 'font-weight: bold';\nvar normal = 'font-weight: normal';\n\n/**\n * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.\n * @param {string} property\n * @param {string} location\n */\nexport function assignment_value_stale(property, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] assignment_value_stale\\n%cAssignment to \\`${property}\\` property (${location}) will evaluate to the right-hand side, not the value of \\`${property}\\` following the assignment. This may result in unexpected behaviour.\\nhttps://svelte.dev/e/assignment_value_stale`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/assignment_value_stale`);\n\t}\n}\n\n/**\n * Detected reactivity loss when reading `%name%`. This happens when state is read in an async function after an earlier `await`\n * @param {string} name\n */\nexport function await_reactivity_loss(name) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] await_reactivity_loss\\n%cDetected reactivity loss when reading \\`${name}\\`. This happens when state is read in an async function after an earlier \\`await\\`\\nhttps://svelte.dev/e/await_reactivity_loss`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/await_reactivity_loss`);\n\t}\n}\n\n/**\n * An async derived, `%name%` (%location%) was not read immediately after it resolved. This often indicates an unnecessary waterfall, which can slow down your app\n * @param {string} name\n * @param {string} location\n */\nexport function await_waterfall(name, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] await_waterfall\\n%cAn async derived, \\`${name}\\` (${location}) was not read immediately after it resolved. This often indicates an unnecessary waterfall, which can slow down your app\\nhttps://svelte.dev/e/await_waterfall`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/await_waterfall`);\n\t}\n}\n\n/**\n * `%binding%` (%location%) is binding to a non-reactive property\n * @param {string} binding\n * @param {string | undefined | null} [location]\n */\nexport function binding_property_non_reactive(binding, location) {\n\tif (DEV) {\n\t\tconsole.warn(\n\t\t\t`%c[svelte] binding_property_non_reactive\\n%c${location\n\t\t\t\t? `\\`${binding}\\` (${location}) is binding to a non-reactive property`\n\t\t\t\t: `\\`${binding}\\` is binding to a non-reactive property`}\\nhttps://svelte.dev/e/binding_property_non_reactive`,\n\t\t\tbold,\n\t\t\tnormal\n\t\t);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/binding_property_non_reactive`);\n\t}\n}\n\n/**\n * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead\n * @param {string} method\n */\nexport function console_log_state(method) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] console_log_state\\n%cYour \\`console.${method}\\` contained \\`$state\\` proxies. Consider using \\`$inspect(...)\\` or \\`$state.snapshot(...)\\` instead\\nhttps://svelte.dev/e/console_log_state`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/console_log_state`);\n\t}\n}\n\n/**\n * %handler% should be a function. Did you mean to %suggestion%?\n * @param {string} handler\n * @param {string} suggestion\n */\nexport function event_handler_invalid(handler, suggestion) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] event_handler_invalid\\n%c${handler} should be a function. Did you mean to ${suggestion}?\\nhttps://svelte.dev/e/event_handler_invalid`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/event_handler_invalid`);\n\t}\n}\n\n/**\n * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n * @param {string} attribute\n * @param {string} html\n * @param {string} value\n */\nexport function hydration_attribute_changed(attribute, html, value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_attribute_changed\\n%cThe \\`${attribute}\\` attribute on \\`${html}\\` changed its value between server and client renders. The client value, \\`${value}\\`, will be ignored in favour of the server value\\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_attribute_changed`);\n\t}\n}\n\n/**\n * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n * @param {string | undefined | null} [location]\n */\nexport function hydration_html_changed(location) {\n\tif (DEV) {\n\t\tconsole.warn(\n\t\t\t`%c[svelte] hydration_html_changed\\n%c${location\n\t\t\t\t? `The value of an \\`{@html ...}\\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value`\n\t\t\t\t: 'The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value'}\\nhttps://svelte.dev/e/hydration_html_changed`,\n\t\t\tbold,\n\t\t\tnormal\n\t\t);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_html_changed`);\n\t}\n}\n\n/**\n * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%\n * @param {string | undefined | null} [location]\n */\nexport function hydration_mismatch(location) {\n\tif (DEV) {\n\t\tconsole.warn(\n\t\t\t`%c[svelte] hydration_mismatch\\n%c${location\n\t\t\t\t? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}`\n\t\t\t\t: 'Hydration failed because the initial UI does not match what was rendered on the server'}\\nhttps://svelte.dev/e/hydration_mismatch`,\n\t\t\tbold,\n\t\t\tnormal\n\t\t);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_mismatch`);\n\t}\n}\n\n/**\n * The `render` function passed to `createRawSnippet` should return HTML for a single element\n */\nexport function invalid_raw_snippet_render() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] invalid_raw_snippet_render\\n%cThe \\`render\\` function passed to \\`createRawSnippet\\` should return HTML for a single element\\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/invalid_raw_snippet_render`);\n\t}\n}\n\n/**\n * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.\n * @param {string} filename\n */\nexport function legacy_recursive_reactive_block(filename) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] legacy_recursive_reactive_block\\n%cDetected a migrated \\`$:\\` reactive block in \\`${filename}\\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \\`$effect\\`.\\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);\n\t}\n}\n\n/**\n * Tried to unmount a component that was not mounted\n */\nexport function lifecycle_double_unmount() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] lifecycle_double_unmount\\n%cTried to unmount a component that was not mounted\\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/lifecycle_double_unmount`);\n\t}\n}\n\n/**\n * %parent% passed property `%prop%` to %child% with `bind:`, but its parent component %owner% did not declare `%prop%` as a binding. Consider creating a binding between %owner% and %parent% (e.g. `bind:%prop%={...}` instead of `%prop%={...}`)\n * @param {string} parent\n * @param {string} prop\n * @param {string} child\n * @param {string} owner\n */\nexport function ownership_invalid_binding(parent, prop, child, owner) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_binding\\n%c${parent} passed property \\`${prop}\\` to ${child} with \\`bind:\\`, but its parent component ${owner} did not declare \\`${prop}\\` as a binding. Consider creating a binding between ${owner} and ${parent} (e.g. \\`bind:${prop}={...}\\` instead of \\`${prop}={...}\\`)\\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_binding`);\n\t}\n}\n\n/**\n * Mutating unbound props (`%name%`, at %location%) is strongly discouraged. Consider using `bind:%prop%={...}` in %parent% (or using a callback) instead\n * @param {string} name\n * @param {string} location\n * @param {string} prop\n * @param {string} parent\n */\nexport function ownership_invalid_mutation(name, location, prop, parent) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_mutation\\n%cMutating unbound props (\\`${name}\\`, at ${location}) is strongly discouraged. Consider using \\`bind:${prop}={...}\\` in ${parent} (or using a callback) instead\\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_mutation`);\n\t}\n}\n\n/**\n * The `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.\n */\nexport function select_multiple_invalid_value() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] select_multiple_invalid_value\\n%cThe \\`value\\` property of a \\`<select multiple>\\` element should be an array, but it received a non-array value. The selection will be kept as is.\\nhttps://svelte.dev/e/select_multiple_invalid_value`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/select_multiple_invalid_value`);\n\t}\n}\n\n/**\n * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results\n * @param {string} operator\n */\nexport function state_proxy_equality_mismatch(operator) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] state_proxy_equality_mismatch\\n%cReactive \\`$state(...)\\` proxies and the values they proxy have different identities. Because of this, comparisons with \\`${operator}\\` will produce unexpected results\\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);\n\t}\n}\n\n/**\n * Tried to unmount a state proxy, rather than a component\n */\nexport function state_proxy_unmount() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] state_proxy_unmount\\n%cTried to unmount a state proxy, rather than a component\\nhttps://svelte.dev/e/state_proxy_unmount`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/state_proxy_unmount`);\n\t}\n}\n\n/**\n * A `<svelte:boundary>` `reset` function only resets the boundary the first time it is called\n */\nexport function svelte_boundary_reset_noop() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] svelte_boundary_reset_noop\\n%cA \\`<svelte:boundary>\\` \\`reset\\` function only resets the boundary the first time it is called\\nhttps://svelte.dev/e/svelte_boundary_reset_noop`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/svelte_boundary_reset_noop`);\n\t}\n}\n\n/**\n * The `slide` transition does not work correctly for elements with `display: %value%`\n * @param {string} value\n */\nexport function transition_slide_display(value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] transition_slide_display\\n%cThe \\`slide\\` transition does not work correctly for elements with \\`display: ${value}\\`\\nhttps://svelte.dev/e/transition_slide_display`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/transition_slide_display`);\n\t}\n}","/** @import { Equals } from '#client' */\n\n/** @type {Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\treturn a != a\n\t\t? b == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function not_equal(a, b) {\n\treturn a !== b;\n}\n\n/** @type {Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n","export let async_mode_flag = false;\nexport let legacy_mode_flag = false;\nexport let tracing_mode_flag = false;\n\nexport function enable_async_mode_flag() {\n\tasync_mode_flag = true;\n}\n\n/** ONLY USE THIS DURING TESTING */\nexport function disable_async_mode_flag() {\n\tasync_mode_flag = false;\n}\n\nexport function enable_legacy_mode_flag() {\n\tlegacy_mode_flag = true;\n}\n\nexport function enable_tracing_mode_flag() {\n\ttracing_mode_flag = true;\n}\n","/** @import { ComponentContext, DevStackEntry, Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport * as e from './errors.js';\nimport { active_effect, active_reaction } from './runtime.js';\nimport { create_user_effect } from './reactivity/effects.js';\nimport { async_mode_flag, legacy_mode_flag } from '../flags/index.js';\nimport { FILENAME } from '../../constants.js';\nimport { BRANCH_EFFECT, EFFECT_RAN } from './constants.js';\n\n/** @type {ComponentContext | null} */\nexport let component_context = null;\n\n/** @param {ComponentContext | null} context */\nexport function set_component_context(context) {\n\tcomponent_context = context;\n}\n\n/** @type {DevStackEntry | null} */\nexport let dev_stack = null;\n\n/** @param {DevStackEntry | null} stack */\nexport function set_dev_stack(stack) {\n\tdev_stack = stack;\n}\n\n/**\n * Execute a callback with a new dev stack entry\n * @param {() => any} callback - Function to execute\n * @param {DevStackEntry['type']} type - Type of block/component\n * @param {any} component - Component function\n * @param {number} line - Line number\n * @param {number} column - Column number\n * @param {Record<string, any>} [additional] - Any additional properties to add to the dev stack entry\n * @returns {any}\n */\nexport function add_svelte_meta(callback, type, component, line, column, additional) {\n\tconst parent = dev_stack;\n\n\tdev_stack = {\n\t\ttype,\n\t\tfile: component[FILENAME],\n\t\tline,\n\t\tcolumn,\n\t\tparent,\n\t\t...additional\n\t};\n\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tdev_stack = parent;\n\t}\n}\n\n/**\n * The current component function. Different from current component context:\n * ```html\n * <!-- App.svelte -->\n * <Foo>\n *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->\n * </Foo>\n * ```\n * @type {ComponentContext['function']}\n */\nexport let dev_current_component_function = null;\n\n/** @param {ComponentContext['function']} fn */\nexport function set_dev_current_component_function(fn) {\n\tdev_current_component_function = fn;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map('getContext');\n\tconst result = /** @type {T} */ (context_map.get(key));\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map('setContext');\n\n\tif (async_mode_flag) {\n\t\tvar flags = /** @type {Effect} */ (active_effect).f;\n\t\tvar valid = !active_reaction && (flags & BRANCH_EFFECT) !== 0 && (flags & EFFECT_RAN) === 0;\n\n\t\tif (!valid) {\n\t\t\te.set_context_after_init();\n\t\t}\n\t}\n\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map('hasContext');\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map('getAllContexts');\n\treturn /** @type {T} */ (context_map);\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tcomponent_context = {\n\t\tp: component_context,\n\t\tc: null,\n\t\te: null,\n\t\ts: props,\n\t\tx: null,\n\t\tl: legacy_mode_flag && !runes ? { s: null, u: null, $: [] } : null\n\t};\n\n\tif (DEV) {\n\t\t// component function\n\t\tcomponent_context.function = fn;\n\t\tdev_current_component_function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tvar context = /** @type {ComponentContext} */ (component_context);\n\tvar effects = context.e;\n\n\tif (effects !== null) {\n\t\tcontext.e = null;\n\n\t\tfor (var fn of effects) {\n\t\t\tcreate_user_effect(fn);\n\t\t}\n\t}\n\n\tif (component !== undefined) {\n\t\tcontext.x = component;\n\t}\n\n\tcomponent_context = context.p;\n\n\tif (DEV) {\n\t\tdev_current_component_function = component_context?.function ?? null;\n\t}\n\n\treturn component ?? /** @type {T} */ ({});\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn !legacy_mode_flag || (component_context !== null && component_context.l === null);\n}\n\n/**\n * @param {string} name\n * @returns {Map<unknown, unknown>}\n */\nfunction get_or_init_context_map(name) {\n\tif (component_context === null) {\n\t\te.lifecycle_outside_component(name);\n\t}\n\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n","import { run_all } from '../../shared/utils.js';\nimport { is_flushing_sync } from '../reactivity/batch.js';\n\n// Fallback for when requestIdleCallback is not available\nconst request_idle_callback =\n\ttypeof requestIdleCallback === 'undefined'\n\t\t? (/** @type {() => void} */ cb) => setTimeout(cb, 1)\n\t\t: requestIdleCallback;\n\n/** @type {Array<() => void>} */\nlet micro_tasks = [];\n\n/** @type {Array<() => void>} */\nlet idle_tasks = [];\n\nfunction run_micro_tasks() {\n\tvar tasks = micro_tasks;\n\tmicro_tasks = [];\n\trun_all(tasks);\n}\n\nfunction run_idle_tasks() {\n\tvar tasks = idle_tasks;\n\tidle_tasks = [];\n\trun_all(tasks);\n}\n\nexport function has_pending_tasks() {\n\treturn micro_tasks.length > 0 || idle_tasks.length > 0;\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_micro_task(fn) {\n\tif (micro_tasks.length === 0 && !is_flushing_sync) {\n\t\tvar tasks = micro_tasks;\n\t\tqueueMicrotask(() => {\n\t\t\t// If this is false, a flushSync happened in the meantime. Do _not_ run new scheduled microtasks in that case\n\t\t\t// as the ordering of microtasks would be broken at that point - consider this case:\n\t\t\t// - queue_micro_task schedules microtask A to flush task X\n\t\t\t// - synchronously after, flushSync runs, processing task X\n\t\t\t// - synchronously after, some other microtask B is scheduled, but not through queue_micro_task but for example a Promise.resolve() in user code\n\t\t\t// - synchronously after, queue_micro_task schedules microtask C to flush task Y\n\t\t\t// - one tick later, microtask A now resolves, flushing task Y before microtask B, which is incorrect\n\t\t\t// This if check prevents that race condition (that realistically will only happen in tests)\n\t\t\tif (tasks === micro_tasks) run_micro_tasks();\n\t\t});\n\t}\n\n\tmicro_tasks.push(fn);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_idle_task(fn) {\n\tif (idle_tasks.length === 0) {\n\t\trequest_idle_callback(run_idle_tasks);\n\t}\n\n\tidle_tasks.push(fn);\n}\n\n/**\n * Synchronously run any queued tasks.\n */\nexport function flush_tasks() {\n\tif (micro_tasks.length > 0) {\n\t\trun_micro_tasks();\n\t}\n\n\tif (idle_tasks.length > 0) {\n\t\trun_idle_tasks();\n\t}\n}\n","/** @import { Derived, Effect } from '#client' */\n/** @import { Boundary } from './dom/blocks/boundary.js' */\nimport { DEV } from 'esm-env';\nimport { FILENAME } from '../../constants.js';\nimport { is_firefox } from './dom/operations.js';\nimport { ERROR_VALUE, BOUNDARY_EFFECT, EFFECT_RAN } from './constants.js';\nimport { define_property, get_descriptor } from '../shared/utils.js';\nimport { active_effect, active_reaction } from './runtime.js';\n\nconst adjustments = new WeakMap();\n\n/**\n * @param {unknown} error\n */\nexport function handle_error(error) {\n\tvar effect = active_effect;\n\n\t// for unowned deriveds, don't throw until we read the value\n\tif (effect === null) {\n\t\t/** @type {Derived} */ (active_reaction).f |= ERROR_VALUE;\n\t\treturn error;\n\t}\n\n\tif (DEV && error instanceof Error && !adjustments.has(error)) {\n\t\tadjustments.set(error, get_adjustments(error, effect));\n\t}\n\n\tif ((effect.f & EFFECT_RAN) === 0) {\n\t\t// if the error occurred while creating this subtree, we let it\n\t\t// bubble up until it hits a boundary that can handle it\n\t\tif ((effect.f & BOUNDARY_EFFECT) === 0) {\n\t\t\tif (!effect.parent && error instanceof Error) {\n\t\t\t\tapply_adjustments(error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/** @type {Boundary} */ (effect.b).error(error);\n\t} else {\n\t\t// otherwise we bubble up the effect tree ourselves\n\t\tinvoke_error_boundary(error, effect);\n\t}\n}\n\n/**\n * @param {unknown} error\n * @param {Effect | null} effect\n */\nexport function invoke_error_boundary(error, effect) {\n\twhile (effect !== null) {\n\t\tif ((effect.f & BOUNDARY_EFFECT) !== 0) {\n\t\t\ttry {\n\t\t\t\t/** @type {Boundary} */ (effect.b).error(error);\n\t\t\t\treturn;\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\n\t\teffect = effect.parent;\n\t}\n\n\tif (error instanceof Error) {\n\t\tapply_adjustments(error);\n\t}\n\n\tthrow error;\n}\n\n/**\n * Add useful information to the error message/stack in development\n * @param {Error} error\n * @param {Effect} effect\n */\nfunction get_adjustments(error, effect) {\n\tconst message_descriptor = get_descriptor(error, 'message');\n\n\t// if the message was already changed and it's not configurable we can't change it\n\t// or it will throw a different error swallowing the original error\n\tif (message_descriptor && !message_descriptor.configurable) return;\n\n\tvar indent = is_firefox ? '  ' : '\\t';\n\tvar component_stack = `\\n${indent}in ${effect.fn?.name || '<unknown>'}`;\n\tvar context = effect.ctx;\n\n\twhile (context !== null) {\n\t\tcomponent_stack += `\\n${indent}in ${context.function?.[FILENAME].split('/').pop()}`;\n\t\tcontext = context.p;\n\t}\n\n\treturn {\n\t\tmessage: error.message + `\\n${component_stack}\\n`,\n\t\tstack: error.stack\n\t\t\t?.split('\\n')\n\t\t\t.filter((line) => !line.includes('svelte/src/internal'))\n\t\t\t.join('\\n')\n\t};\n}\n\n/**\n * @param {Error} error\n */\nfunction apply_adjustments(error) {\n\tconst adjusted = adjustments.get(error);\n\n\tif (adjusted) {\n\t\tdefine_property(error, 'message', {\n\t\t\tvalue: adjusted.message\n\t\t});\n\n\t\tdefine_property(error, 'stack', {\n\t\t\tvalue: adjusted.stack\n\t\t});\n\t}\n}\n","/** @import { Derived, Effect, Source } from '#client' */\nimport {\n\tBLOCK_EFFECT,\n\tBRANCH_EFFECT,\n\tCLEAN,\n\tDESTROYED,\n\tDIRTY,\n\tEFFECT,\n\tASYNC,\n\tINERT,\n\tRENDER_EFFECT,\n\tROOT_EFFECT,\n\tMAYBE_DIRTY\n} from '#client/constants';\nimport { async_mode_flag } from '../../flags/index.js';\nimport { deferred, define_property } from '../../shared/utils.js';\nimport {\n\tactive_effect,\n\tis_dirty,\n\tis_updating_effect,\n\tset_is_updating_effect,\n\tset_signal_status,\n\tupdate_effect\n} from '../runtime.js';\nimport * as e from '../errors.js';\nimport { flush_tasks, has_pending_tasks, queue_micro_task } from '../dom/task.js';\nimport { DEV } from 'esm-env';\nimport { invoke_error_boundary } from '../error-handling.js';\nimport { old_values } from './sources.js';\nimport { unlink_effect } from './effects.js';\n\n/** @type {Set<Batch>} */\nconst batches = new Set();\n\n/** @type {Batch | null} */\nexport let current_batch = null;\n\n/**\n * This is needed to avoid overwriting inputs in non-async mode\n * TODO 6.0 remove this, as non-async mode will go away\n * @type {Batch | null}\n */\nexport let previous_batch = null;\n\n/**\n * When time travelling, we re-evaluate deriveds based on the temporary\n * values of their dependencies rather than their actual values, and cache\n * the results in this map rather than on the deriveds themselves\n * @type {Map<Derived, any> | null}\n */\nexport let batch_deriveds = null;\n\n/** @type {Set<() => void>} */\nexport let effect_pending_updates = new Set();\n\n/** @type {Effect[]} */\nlet queued_root_effects = [];\n\n/** @type {Effect | null} */\nlet last_scheduled_effect = null;\n\nlet is_flushing = false;\nexport let is_flushing_sync = false;\n\nexport class Batch {\n\t/**\n\t * The current values of any sources that are updated in this batch\n\t * They keys of this map are identical to `this.#previous`\n\t * @type {Map<Source, any>}\n\t */\n\tcurrent = new Map();\n\n\t/**\n\t * The values of any sources that are updated in this batch _before_ those updates took place.\n\t * They keys of this map are identical to `this.#current`\n\t * @type {Map<Source, any>}\n\t */\n\t#previous = new Map();\n\n\t/**\n\t * When the batch is committed (and the DOM is updated), we need to remove old branches\n\t * and append new ones by calling the functions added inside (if/each/key/etc) blocks\n\t * @type {Set<() => void>}\n\t */\n\t#callbacks = new Set();\n\n\t/**\n\t * The number of async effects that are currently in flight\n\t */\n\t#pending = 0;\n\n\t/**\n\t * A deferred that resolves when the batch is committed, used with `settled()`\n\t * TODO replace with Promise.withResolvers once supported widely enough\n\t * @type {{ promise: Promise<void>, resolve: (value?: any) => void, reject: (reason: unknown) => void } | null}\n\t */\n\t#deferred = null;\n\n\t/**\n\t * True if an async effect inside this batch resolved and\n\t * its parent branch was already deleted\n\t */\n\t#neutered = false;\n\n\t/**\n\t * Async effects (created inside `async_derived`) encountered during processing.\n\t * These run after the rest of the batch has updated, since they should\n\t * always have the latest values\n\t * @type {Effect[]}\n\t */\n\t#async_effects = [];\n\n\t/**\n\t * The same as `#async_effects`, but for effects inside a newly-created\n\t * `<svelte:boundary>` — these do not prevent the batch from committing\n\t * @type {Effect[]}\n\t */\n\t#boundary_async_effects = [];\n\n\t/**\n\t * Template effects and `$effect.pre` effects, which run when\n\t * a batch is committed\n\t * @type {Effect[]}\n\t */\n\t#render_effects = [];\n\n\t/**\n\t * The same as `#render_effects`, but for `$effect` (which runs after)\n\t * @type {Effect[]}\n\t */\n\t#effects = [];\n\n\t/**\n\t * Block effects, which may need to re-run on subsequent flushes\n\t * in order to update internal sources (e.g. each block items)\n\t * @type {Effect[]}\n\t */\n\t#block_effects = [];\n\n\t/**\n\t * Deferred effects (which run after async work has completed) that are DIRTY\n\t * @type {Effect[]}\n\t */\n\t#dirty_effects = [];\n\n\t/**\n\t * Deferred effects that are MAYBE_DIRTY\n\t * @type {Effect[]}\n\t */\n\t#maybe_dirty_effects = [];\n\n\t/**\n\t * A set of branches that still exist, but will be destroyed when this batch\n\t * is committed — we skip over these during `process`\n\t * @type {Set<Effect>}\n\t */\n\tskipped_effects = new Set();\n\n\t/**\n\t *\n\t * @param {Effect[]} root_effects\n\t */\n\tprocess(root_effects) {\n\t\tqueued_root_effects = [];\n\n\t\tprevious_batch = null;\n\n\t\t/** @type {Map<Source, { v: unknown, wv: number }> | null} */\n\t\tvar current_values = null;\n\n\t\t// if there are multiple batches, we are 'time travelling' —\n\t\t// we need to undo the changes belonging to any batch\n\t\t// other than the current one\n\t\tif (async_mode_flag && batches.size > 1) {\n\t\t\tcurrent_values = new Map();\n\t\t\tbatch_deriveds = new Map();\n\n\t\t\tfor (const [source, current] of this.current) {\n\t\t\t\tcurrent_values.set(source, { v: source.v, wv: source.wv });\n\t\t\t\tsource.v = current;\n\t\t\t}\n\n\t\t\tfor (const batch of batches) {\n\t\t\t\tif (batch === this) continue;\n\n\t\t\t\tfor (const [source, previous] of batch.#previous) {\n\t\t\t\t\tif (!current_values.has(source)) {\n\t\t\t\t\t\tcurrent_values.set(source, { v: source.v, wv: source.wv });\n\t\t\t\t\t\tsource.v = previous;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const root of root_effects) {\n\t\t\tthis.#traverse_effect_tree(root);\n\t\t}\n\n\t\t// if we didn't start any new async work, and no async work\n\t\t// is outstanding from a previous flush, commit\n\t\tif (this.#async_effects.length === 0 && this.#pending === 0) {\n\t\t\tthis.#commit();\n\n\t\t\tvar render_effects = this.#render_effects;\n\t\t\tvar effects = this.#effects;\n\n\t\t\tthis.#render_effects = [];\n\t\t\tthis.#effects = [];\n\t\t\tthis.#block_effects = [];\n\n\t\t\t// If sources are written to, then work needs to happen in a separate batch, else prior sources would be mixed with\n\t\t\t// newly updated sources, which could lead to infinite loops when effects run over and over again.\n\t\t\tprevious_batch = current_batch;\n\t\t\tcurrent_batch = null;\n\n\t\t\tflush_queued_effects(render_effects);\n\t\t\tflush_queued_effects(effects);\n\n\t\t\t// Reinstate the current batch if there was no new one created, as `process()` runs in a loop in `flush_effects()`.\n\t\t\t// That method expects `current_batch` to be set, and could run the loop again if effects result in new effects\n\t\t\t// being scheduled but without writes happening in which case no new batch is created.\n\t\t\tif (current_batch === null) {\n\t\t\t\tcurrent_batch = this;\n\t\t\t} else {\n\t\t\t\tbatches.delete(this);\n\t\t\t}\n\n\t\t\tthis.#deferred?.resolve();\n\t\t} else {\n\t\t\tthis.#defer_effects(this.#render_effects);\n\t\t\tthis.#defer_effects(this.#effects);\n\t\t\tthis.#defer_effects(this.#block_effects);\n\t\t}\n\n\t\tif (current_values) {\n\t\t\tfor (const [source, { v, wv }] of current_values) {\n\t\t\t\t// reset the source to the current value (unless\n\t\t\t\t// it got a newer value as a result of effects running)\n\t\t\t\tif (source.wv <= wv) {\n\t\t\t\t\tsource.v = v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbatch_deriveds = null;\n\t\t}\n\n\t\tfor (const effect of this.#async_effects) {\n\t\t\tupdate_effect(effect);\n\t\t}\n\n\t\tfor (const effect of this.#boundary_async_effects) {\n\t\t\tupdate_effect(effect);\n\t\t}\n\n\t\tthis.#async_effects = [];\n\t\tthis.#boundary_async_effects = [];\n\t}\n\n\t/**\n\t * Traverse the effect tree, executing effects or stashing\n\t * them for later execution as appropriate\n\t * @param {Effect} root\n\t */\n\t#traverse_effect_tree(root) {\n\t\troot.f ^= CLEAN;\n\n\t\tvar effect = root.first;\n\n\t\twhile (effect !== null) {\n\t\t\tvar flags = effect.f;\n\t\t\tvar is_branch = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) !== 0;\n\t\t\tvar is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\n\n\t\t\tvar skip = is_skippable_branch || (flags & INERT) !== 0 || this.skipped_effects.has(effect);\n\n\t\t\tif (!skip && effect.fn !== null) {\n\t\t\t\tif (is_branch) {\n\t\t\t\t\teffect.f ^= CLEAN;\n\t\t\t\t} else if ((flags & EFFECT) !== 0) {\n\t\t\t\t\tthis.#effects.push(effect);\n\t\t\t\t} else if (async_mode_flag && (flags & RENDER_EFFECT) !== 0) {\n\t\t\t\t\tthis.#render_effects.push(effect);\n\t\t\t\t} else if ((flags & CLEAN) === 0) {\n\t\t\t\t\tif ((flags & ASYNC) !== 0) {\n\t\t\t\t\t\tvar effects = effect.b?.is_pending()\n\t\t\t\t\t\t\t? this.#boundary_async_effects\n\t\t\t\t\t\t\t: this.#async_effects;\n\n\t\t\t\t\t\teffects.push(effect);\n\t\t\t\t\t} else if (is_dirty(effect)) {\n\t\t\t\t\t\tif ((effect.f & BLOCK_EFFECT) !== 0) this.#block_effects.push(effect);\n\t\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar child = effect.first;\n\n\t\t\t\tif (child !== null) {\n\t\t\t\t\teffect = child;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = effect.parent;\n\t\t\teffect = effect.next;\n\n\t\t\twhile (effect === null && parent !== null) {\n\t\t\t\teffect = parent.next;\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Effect[]} effects\n\t */\n\t#defer_effects(effects) {\n\t\tfor (const e of effects) {\n\t\t\tconst target = (e.f & DIRTY) !== 0 ? this.#dirty_effects : this.#maybe_dirty_effects;\n\t\t\ttarget.push(e);\n\n\t\t\t// mark as clean so they get scheduled if they depend on pending async state\n\t\t\tset_signal_status(e, CLEAN);\n\t\t}\n\n\t\teffects.length = 0;\n\t}\n\n\t/**\n\t * Associate a change to a given source with the current\n\t * batch, noting its previous and current values\n\t * @param {Source} source\n\t * @param {any} value\n\t */\n\tcapture(source, value) {\n\t\tif (!this.#previous.has(source)) {\n\t\t\tthis.#previous.set(source, value);\n\t\t}\n\n\t\tthis.current.set(source, source.v);\n\t}\n\n\tactivate() {\n\t\tcurrent_batch = this;\n\t}\n\n\tdeactivate() {\n\t\tcurrent_batch = null;\n\t\tprevious_batch = null;\n\n\t\tfor (const update of effect_pending_updates) {\n\t\t\teffect_pending_updates.delete(update);\n\t\t\tupdate();\n\n\t\t\tif (current_batch !== null) {\n\t\t\t\t// only do one at a time\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tneuter() {\n\t\tthis.#neutered = true;\n\t}\n\n\tflush() {\n\t\tif (queued_root_effects.length > 0) {\n\t\t\tflush_effects();\n\t\t} else {\n\t\t\tthis.#commit();\n\t\t}\n\n\t\tif (current_batch !== this) {\n\t\t\t// this can happen if a `flushSync` occurred during `flush_effects()`,\n\t\t\t// which is permitted in legacy mode despite being a terrible idea\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.#pending === 0) {\n\t\t\tbatches.delete(this);\n\t\t}\n\n\t\tthis.deactivate();\n\t}\n\n\t/**\n\t * Append and remove branches to/from the DOM\n\t */\n\t#commit() {\n\t\tif (!this.#neutered) {\n\t\t\tfor (const fn of this.#callbacks) {\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\n\t\tthis.#callbacks.clear();\n\t}\n\n\tincrement() {\n\t\tthis.#pending += 1;\n\t}\n\n\tdecrement() {\n\t\tthis.#pending -= 1;\n\n\t\tif (this.#pending === 0) {\n\t\t\tfor (const e of this.#dirty_effects) {\n\t\t\t\tset_signal_status(e, DIRTY);\n\t\t\t\tschedule_effect(e);\n\t\t\t}\n\n\t\t\tfor (const e of this.#maybe_dirty_effects) {\n\t\t\t\tset_signal_status(e, MAYBE_DIRTY);\n\t\t\t\tschedule_effect(e);\n\t\t\t}\n\n\t\t\tthis.#render_effects = [];\n\t\t\tthis.#effects = [];\n\n\t\t\tthis.flush();\n\t\t} else {\n\t\t\tthis.deactivate();\n\t\t}\n\t}\n\n\t/** @param {() => void} fn */\n\tadd_callback(fn) {\n\t\tthis.#callbacks.add(fn);\n\t}\n\n\tsettled() {\n\t\treturn (this.#deferred ??= deferred()).promise;\n\t}\n\n\tstatic ensure() {\n\t\tif (current_batch === null) {\n\t\t\tconst batch = (current_batch = new Batch());\n\t\t\tbatches.add(current_batch);\n\n\t\t\tif (!is_flushing_sync) {\n\t\t\t\tBatch.enqueue(() => {\n\t\t\t\t\tif (current_batch !== batch) {\n\t\t\t\t\t\t// a flushSync happened in the meantime\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbatch.flush();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn current_batch;\n\t}\n\n\t/** @param {() => void} task */\n\tstatic enqueue(task) {\n\t\tqueue_micro_task(task);\n\t}\n}\n\n/**\n * Synchronously flush any pending updates.\n * Returns void if no callback is provided, otherwise returns the result of calling the callback.\n * @template [T=void]\n * @param {(() => T) | undefined} [fn]\n * @returns {T}\n */\nexport function flushSync(fn) {\n\tif (async_mode_flag && active_effect !== null) {\n\t\t// We disallow this because it creates super-hard to reason about stack trace and because it's generally a bad idea\n\t\te.flush_sync_in_effect();\n\t}\n\n\tvar was_flushing_sync = is_flushing_sync;\n\tis_flushing_sync = true;\n\n\ttry {\n\t\tvar result;\n\n\t\tif (fn) {\n\t\t\tflush_effects();\n\t\t\tresult = fn();\n\t\t}\n\n\t\twhile (true) {\n\t\t\tflush_tasks();\n\n\t\t\tif (queued_root_effects.length === 0 && !has_pending_tasks()) {\n\t\t\t\tcurrent_batch?.flush();\n\n\t\t\t\t// we need to check again, in case we just updated an `$effect.pending()`\n\t\t\t\tif (queued_root_effects.length === 0) {\n\t\t\t\t\t// this would be reset in `flush_effects()` but since we are early returning here,\n\t\t\t\t\t// we need to reset it here as well in case the first time there's 0 queued root effects\n\t\t\t\t\tlast_scheduled_effect = null;\n\n\t\t\t\t\treturn /** @type {T} */ (result);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_effects();\n\t\t}\n\t} finally {\n\t\tis_flushing_sync = was_flushing_sync;\n\t}\n}\n\nfunction flush_effects() {\n\tvar was_updating_effect = is_updating_effect;\n\tis_flushing = true;\n\n\ttry {\n\t\tvar flush_count = 0;\n\t\tset_is_updating_effect(true);\n\n\t\twhile (queued_root_effects.length > 0) {\n\t\t\tvar batch = Batch.ensure();\n\n\t\t\tif (flush_count++ > 1000) {\n\t\t\t\tif (DEV) {\n\t\t\t\t\tvar updates = new Map();\n\n\t\t\t\t\tfor (const source of batch.current.keys()) {\n\t\t\t\t\t\tfor (const [stack, update] of source.updated ?? []) {\n\t\t\t\t\t\t\tvar entry = updates.get(stack);\n\n\t\t\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\t\t\tentry = { error: update.error, count: 0 };\n\t\t\t\t\t\t\t\tupdates.set(stack, entry);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tentry.count += update.count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const update of updates.values()) {\n\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\tconsole.error(update.error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tinfinite_loop_guard();\n\t\t\t}\n\n\t\t\tbatch.process(queued_root_effects);\n\t\t\told_values.clear();\n\t\t}\n\t} finally {\n\t\tis_flushing = false;\n\t\tset_is_updating_effect(was_updating_effect);\n\n\t\tlast_scheduled_effect = null;\n\t}\n}\n\nfunction infinite_loop_guard() {\n\ttry {\n\t\te.effect_update_depth_exceeded();\n\t} catch (error) {\n\t\tif (DEV) {\n\t\t\t// stack contains no useful information, replace it\n\t\t\tdefine_property(error, 'stack', { value: '' });\n\t\t}\n\n\t\t// Best effort: invoke the boundary nearest the most recent\n\t\t// effect and hope that it's relevant to the infinite loop\n\t\tinvoke_error_boundary(error, last_scheduled_effect);\n\t}\n}\n\n/** @type {Effect[] | null} */\nexport let eager_block_effects = null;\n\n/**\n * @param {Array<Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tvar i = 0;\n\n\twhile (i < length) {\n\t\tvar effect = effects[i++];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0 && is_dirty(effect)) {\n\t\t\teager_block_effects = [];\n\n\t\t\tupdate_effect(effect);\n\n\t\t\t// Effects with no dependencies or teardown do not get added to the effect tree.\n\t\t\t// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we\n\t\t\t// don't know if we need to keep them until they are executed. Doing the check\n\t\t\t// here (rather than in `update_effect`) allows us to skip the work for\n\t\t\t// immediate effects.\n\t\t\tif (effect.deps === null && effect.first === null && effect.nodes_start === null) {\n\t\t\t\t// if there's no teardown or abort controller we completely unlink\n\t\t\t\t// the effect from the graph\n\t\t\t\tif (effect.teardown === null && effect.ac === null) {\n\t\t\t\t\t// remove this effect from the graph\n\t\t\t\t\tunlink_effect(effect);\n\t\t\t\t} else {\n\t\t\t\t\t// keep the effect in the graph, but free up some memory\n\t\t\t\t\teffect.fn = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If update_effect() has a flushSync() in it, we may have flushed another flush_queued_effects(),\n\t\t\t// which already handled this logic and did set eager_block_effects to null.\n\t\t\tif (eager_block_effects?.length > 0) {\n\t\t\t\t// TODO this feels incorrect! it gets the tests passing\n\t\t\t\told_values.clear();\n\n\t\t\t\tfor (const e of eager_block_effects) {\n\t\t\t\t\tupdate_effect(e);\n\t\t\t\t}\n\n\t\t\t\teager_block_effects = [];\n\t\t\t}\n\t\t}\n\t}\n\n\teager_block_effects = null;\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tvar effect = (last_scheduled_effect = signal);\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\t// if the effect is being scheduled because a parent (each/await/etc) block\n\t\t// updated an internal source, bail out or we'll cause a second flush\n\t\tif (is_flushing && effect === active_effect && (flags & BLOCK_EFFECT) !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\teffect.f ^= CLEAN;\n\t\t}\n\t}\n\n\tqueued_root_effects.push(effect);\n}\n\n/**\n * Forcibly remove all current batches, to prevent cross-talk between tests\n */\nexport function clear() {\n\tbatches.clear();\n}\n","import { get, tick, untrack } from '../internal/client/runtime.js';\nimport { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\nimport { source, increment } from '../internal/client/reactivity/sources.js';\nimport { tag } from '../internal/client/dev/tracing.js';\nimport { DEV } from 'esm-env';\nimport { queue_micro_task } from '../internal/client/dom/task.js';\n\n/**\n * Returns a `subscribe` function that integrates external event-based systems with Svelte's reactivity.\n * It's particularly useful for integrating with web APIs like `MediaQuery`, `IntersectionObserver`, or `WebSocket`.\n *\n * If `subscribe` is called inside an effect (including indirectly, for example inside a getter),\n * the `start` callback will be called with an `update` function. Whenever `update` is called, the effect re-runs.\n *\n * If `start` returns a cleanup function, it will be called when the effect is destroyed.\n *\n * If `subscribe` is called in multiple effects, `start` will only be called once as long as the effects\n * are active, and the returned teardown function will only be called when all effects are destroyed.\n *\n * It's best understood with an example. Here's an implementation of [`MediaQuery`](https://svelte.dev/docs/svelte/svelte-reactivity#MediaQuery):\n *\n * ```js\n * import { createSubscriber } from 'svelte/reactivity';\n * import { on } from 'svelte/events';\n *\n * export class MediaQuery {\n * \t#query;\n * \t#subscribe;\n *\n * \tconstructor(query) {\n * \t\tthis.#query = window.matchMedia(`(${query})`);\n *\n * \t\tthis.#subscribe = createSubscriber((update) => {\n * \t\t\t// when the `change` event occurs, re-run any effects that read `this.current`\n * \t\t\tconst off = on(this.#query, 'change', update);\n *\n * \t\t\t// stop listening when all the effects are destroyed\n * \t\t\treturn () => off();\n * \t\t});\n * \t}\n *\n * \tget current() {\n * \t\t// This makes the getter reactive, if read in an effect\n * \t\tthis.#subscribe();\n *\n * \t\t// Return the current state of the query, whether or not we're in an effect\n * \t\treturn this.#query.matches;\n * \t}\n * }\n * ```\n * @param {(update: () => void) => (() => void) | void} start\n * @since 5.7.0\n */\nexport function createSubscriber(start) {\n\tlet subscribers = 0;\n\tlet version = source(0);\n\t/** @type {(() => void) | void} */\n\tlet stop;\n\n\tif (DEV) {\n\t\ttag(version, 'createSubscriber version');\n\t}\n\n\treturn () => {\n\t\tif (effect_tracking()) {\n\t\t\tget(version);\n\n\t\t\trender_effect(() => {\n\t\t\t\tif (subscribers === 0) {\n\t\t\t\t\tstop = untrack(() => start(() => increment(version)));\n\t\t\t\t}\n\n\t\t\t\tsubscribers += 1;\n\n\t\t\t\treturn () => {\n\t\t\t\t\tqueue_micro_task(() => {\n\t\t\t\t\t\t// Only count down after a microtask, else we would reach 0 before our own render effect reruns,\n\t\t\t\t\t\t// but reach 1 again when the tick callback of the prior teardown runs. That would mean we\n\t\t\t\t\t\t// re-subcribe unnecessarily and create a memory leak because the old subscription is never cleaned up.\n\t\t\t\t\t\tsubscribers -= 1;\n\n\t\t\t\t\t\tif (subscribers === 0) {\n\t\t\t\t\t\t\tstop?.();\n\t\t\t\t\t\t\tstop = undefined;\n\t\t\t\t\t\t\t// Increment the version to ensure any dependent deriveds are marked dirty when the subscription is picked up again later.\n\t\t\t\t\t\t\t// If we didn't do this then the comparison of write versions would determine that the derived has a later version than\n\t\t\t\t\t\t\t// the subscriber, and it would not be re-run.\n\t\t\t\t\t\t\tincrement(version);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n}\n","/** @import { Effect, Source, TemplateNode, } from '#client' */\nimport {\n\tBOUNDARY_EFFECT,\n\tCOMMENT_NODE,\n\tEFFECT_PRESERVED,\n\tEFFECT_TRANSPARENT\n} from '#client/constants';\nimport { HYDRATION_START_ELSE } from '../../../../constants.js';\nimport { component_context, set_component_context } from '../../context.js';\nimport { handle_error, invoke_error_boundary } from '../../error-handling.js';\nimport { block, branch, destroy_effect, pause_effect } from '../../reactivity/effects.js';\nimport {\n\tactive_effect,\n\tactive_reaction,\n\tget,\n\tset_active_effect,\n\tset_active_reaction\n} from '../../runtime.js';\nimport {\n\thydrate_next,\n\thydrate_node,\n\thydrating,\n\tnext,\n\tskip_nodes,\n\tset_hydrate_node\n} from '../hydration.js';\nimport { get_next_sibling } from '../operations.js';\nimport { queue_micro_task } from '../task.js';\nimport * as e from '../../errors.js';\nimport * as w from '../../warnings.js';\nimport { DEV } from 'esm-env';\nimport { Batch, current_batch, effect_pending_updates } from '../../reactivity/batch.js';\nimport { internal_set, source } from '../../reactivity/sources.js';\nimport { tag } from '../../dev/tracing.js';\nimport { createSubscriber } from '../../../../reactivity/create-subscriber.js';\n\n/**\n * @typedef {{\n * \t onerror?: (error: unknown, reset: () => void) => void;\n *   failed?: (anchor: Node, error: () => unknown, reset: () => () => void) => void;\n *   pending?: (anchor: Node) => void;\n * }} BoundaryProps\n */\n\nvar flags = EFFECT_TRANSPARENT | EFFECT_PRESERVED | BOUNDARY_EFFECT;\n\n/**\n * @param {TemplateNode} node\n * @param {BoundaryProps} props\n * @param {((anchor: Node) => void)} children\n * @returns {void}\n */\nexport function boundary(node, props, children) {\n\tnew Boundary(node, props, children);\n}\n\nexport class Boundary {\n\t/** @type {Boundary | null} */\n\tparent;\n\n\t#pending = false;\n\n\t/** @type {TemplateNode} */\n\t#anchor;\n\n\t/** @type {TemplateNode | null} */\n\t#hydrate_open = hydrating ? hydrate_node : null;\n\n\t/** @type {BoundaryProps} */\n\t#props;\n\n\t/** @type {((anchor: Node) => void)} */\n\t#children;\n\n\t/** @type {Effect} */\n\t#effect;\n\n\t/** @type {Effect | null} */\n\t#main_effect = null;\n\n\t/** @type {Effect | null} */\n\t#pending_effect = null;\n\n\t/** @type {Effect | null} */\n\t#failed_effect = null;\n\n\t/** @type {DocumentFragment | null} */\n\t#offscreen_fragment = null;\n\n\t#local_pending_count = 0;\n\t#pending_count = 0;\n\n\t#is_creating_fallback = false;\n\n\t/**\n\t * A source containing the number of pending async deriveds/expressions.\n\t * Only created if `$effect.pending()` is used inside the boundary,\n\t * otherwise updating the source results in needless `Batch.ensure()`\n\t * calls followed by no-op flushes\n\t * @type {Source<number> | null}\n\t */\n\t#effect_pending = null;\n\n\t#effect_pending_update = () => {\n\t\tif (this.#effect_pending) {\n\t\t\tinternal_set(this.#effect_pending, this.#local_pending_count);\n\t\t}\n\t};\n\n\t#effect_pending_subscriber = createSubscriber(() => {\n\t\tthis.#effect_pending = source(this.#local_pending_count);\n\n\t\tif (DEV) {\n\t\t\ttag(this.#effect_pending, '$effect.pending()');\n\t\t}\n\n\t\treturn () => {\n\t\t\tthis.#effect_pending = null;\n\t\t};\n\t});\n\n\t/**\n\t * @param {TemplateNode} node\n\t * @param {BoundaryProps} props\n\t * @param {((anchor: Node) => void)} children\n\t */\n\tconstructor(node, props, children) {\n\t\tthis.#anchor = node;\n\t\tthis.#props = props;\n\t\tthis.#children = children;\n\n\t\tthis.parent = /** @type {Effect} */ (active_effect).b;\n\n\t\tthis.#pending = !!this.#props.pending;\n\n\t\tthis.#effect = block(() => {\n\t\t\t/** @type {Effect} */ (active_effect).b = this;\n\n\t\t\tif (hydrating) {\n\t\t\t\tconst comment = this.#hydrate_open;\n\t\t\t\thydrate_next();\n\n\t\t\t\tconst server_rendered_pending =\n\t\t\t\t\t/** @type {Comment} */ (comment).nodeType === COMMENT_NODE &&\n\t\t\t\t\t/** @type {Comment} */ (comment).data === HYDRATION_START_ELSE;\n\n\t\t\t\tif (server_rendered_pending) {\n\t\t\t\t\tthis.#hydrate_pending_content();\n\t\t\t\t} else {\n\t\t\t\t\tthis.#hydrate_resolved_content();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tthis.#main_effect = branch(() => children(this.#anchor));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error(error);\n\t\t\t\t}\n\n\t\t\t\tif (this.#pending_count > 0) {\n\t\t\t\t\tthis.#show_pending_snippet();\n\t\t\t\t} else {\n\t\t\t\t\tthis.#pending = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}, flags);\n\n\t\tif (hydrating) {\n\t\t\tthis.#anchor = hydrate_node;\n\t\t}\n\t}\n\n\t#hydrate_resolved_content() {\n\t\ttry {\n\t\t\tthis.#main_effect = branch(() => this.#children(this.#anchor));\n\t\t} catch (error) {\n\t\t\tthis.error(error);\n\t\t}\n\n\t\t// Since server rendered resolved content, we never show pending state\n\t\t// Even if client-side async operations are still running, the content is already displayed\n\t\tthis.#pending = false;\n\t}\n\n\t#hydrate_pending_content() {\n\t\tconst pending = this.#props.pending;\n\t\tif (!pending) {\n\t\t\treturn;\n\t\t}\n\t\tthis.#pending_effect = branch(() => pending(this.#anchor));\n\n\t\tBatch.enqueue(() => {\n\t\t\tthis.#main_effect = this.#run(() => {\n\t\t\t\tBatch.ensure();\n\t\t\t\treturn branch(() => this.#children(this.#anchor));\n\t\t\t});\n\n\t\t\tif (this.#pending_count > 0) {\n\t\t\t\tthis.#show_pending_snippet();\n\t\t\t} else {\n\t\t\t\tpause_effect(/** @type {Effect} */ (this.#pending_effect), () => {\n\t\t\t\t\tthis.#pending_effect = null;\n\t\t\t\t});\n\n\t\t\t\tthis.#pending = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns `true` if the effect exists inside a boundary whose pending snippet is shown\n\t * @returns {boolean}\n\t */\n\tis_pending() {\n\t\treturn this.#pending || (!!this.parent && this.parent.is_pending());\n\t}\n\n\thas_pending_snippet() {\n\t\treturn !!this.#props.pending;\n\t}\n\n\t/**\n\t * @param {() => Effect | null} fn\n\t */\n\t#run(fn) {\n\t\tvar previous_effect = active_effect;\n\t\tvar previous_reaction = active_reaction;\n\t\tvar previous_ctx = component_context;\n\n\t\tset_active_effect(this.#effect);\n\t\tset_active_reaction(this.#effect);\n\t\tset_component_context(this.#effect.ctx);\n\n\t\ttry {\n\t\t\treturn fn();\n\t\t} catch (e) {\n\t\t\thandle_error(e);\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tset_active_effect(previous_effect);\n\t\t\tset_active_reaction(previous_reaction);\n\t\t\tset_component_context(previous_ctx);\n\t\t}\n\t}\n\n\t#show_pending_snippet() {\n\t\tconst pending = /** @type {(anchor: Node) => void} */ (this.#props.pending);\n\n\t\tif (this.#main_effect !== null) {\n\t\t\tthis.#offscreen_fragment = document.createDocumentFragment();\n\t\t\tmove_effect(this.#main_effect, this.#offscreen_fragment);\n\t\t}\n\n\t\tif (this.#pending_effect === null) {\n\t\t\tthis.#pending_effect = branch(() => pending(this.#anchor));\n\t\t}\n\t}\n\n\t/**\n\t * Updates the pending count associated with the currently visible pending snippet,\n\t * if any, such that we can replace the snippet with content once work is done\n\t * @param {1 | -1} d\n\t */\n\t#update_pending_count(d) {\n\t\tif (!this.has_pending_snippet()) {\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.#update_pending_count(d);\n\t\t\t}\n\n\t\t\t// if there's no parent, we're in a scope with no pending snippet\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#pending_count += d;\n\n\t\tif (this.#pending_count === 0) {\n\t\t\tthis.#pending = false;\n\n\t\t\tif (this.#pending_effect) {\n\t\t\t\tpause_effect(this.#pending_effect, () => {\n\t\t\t\t\tthis.#pending_effect = null;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.#offscreen_fragment) {\n\t\t\t\tthis.#anchor.before(this.#offscreen_fragment);\n\t\t\t\tthis.#offscreen_fragment = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Update the source that powers `$effect.pending()` inside this boundary,\n\t * and controls when the current `pending` snippet (if any) is removed.\n\t * Do not call from inside the class\n\t * @param {1 | -1} d\n\t */\n\tupdate_pending_count(d) {\n\t\tthis.#update_pending_count(d);\n\n\t\tthis.#local_pending_count += d;\n\t\teffect_pending_updates.add(this.#effect_pending_update);\n\t}\n\n\tget_effect_pending() {\n\t\tthis.#effect_pending_subscriber();\n\t\treturn get(/** @type {Source<number>} */ (this.#effect_pending));\n\t}\n\n\t/** @param {unknown} error */\n\terror(error) {\n\t\tvar onerror = this.#props.onerror;\n\t\tlet failed = this.#props.failed;\n\n\t\t// If we have nothing to capture the error, or if we hit an error while\n\t\t// rendering the fallback, re-throw for another boundary to handle\n\t\tif (this.#is_creating_fallback || (!onerror && !failed)) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this.#main_effect) {\n\t\t\tdestroy_effect(this.#main_effect);\n\t\t\tthis.#main_effect = null;\n\t\t}\n\n\t\tif (this.#pending_effect) {\n\t\t\tdestroy_effect(this.#pending_effect);\n\t\t\tthis.#pending_effect = null;\n\t\t}\n\n\t\tif (this.#failed_effect) {\n\t\t\tdestroy_effect(this.#failed_effect);\n\t\t\tthis.#failed_effect = null;\n\t\t}\n\n\t\tif (hydrating) {\n\t\t\tset_hydrate_node(/** @type {TemplateNode} */ (this.#hydrate_open));\n\t\t\tnext();\n\t\t\tset_hydrate_node(skip_nodes());\n\t\t}\n\n\t\tvar did_reset = false;\n\t\tvar calling_on_error = false;\n\n\t\tconst reset = () => {\n\t\t\tif (did_reset) {\n\t\t\t\tw.svelte_boundary_reset_noop();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdid_reset = true;\n\n\t\t\tif (calling_on_error) {\n\t\t\t\te.svelte_boundary_reset_onerror();\n\t\t\t}\n\n\t\t\t// If the failure happened while flushing effects, current_batch can be null\n\t\t\tBatch.ensure();\n\n\t\t\tthis.#local_pending_count = 0;\n\n\t\t\tif (this.#failed_effect !== null) {\n\t\t\t\tpause_effect(this.#failed_effect, () => {\n\t\t\t\t\tthis.#failed_effect = null;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// we intentionally do not try to find the nearest pending boundary. If this boundary has one, we'll render it on reset\n\t\t\t// but it would be really weird to show the parent's boundary on a child reset.\n\t\t\tthis.#pending = this.has_pending_snippet();\n\n\t\t\tthis.#main_effect = this.#run(() => {\n\t\t\t\tthis.#is_creating_fallback = false;\n\t\t\t\treturn branch(() => this.#children(this.#anchor));\n\t\t\t});\n\n\t\t\tif (this.#pending_count > 0) {\n\t\t\t\tthis.#show_pending_snippet();\n\t\t\t} else {\n\t\t\t\tthis.#pending = false;\n\t\t\t}\n\t\t};\n\n\t\tvar previous_reaction = active_reaction;\n\n\t\ttry {\n\t\t\tset_active_reaction(null);\n\t\t\tcalling_on_error = true;\n\t\t\tonerror?.(error, reset);\n\t\t\tcalling_on_error = false;\n\t\t} catch (error) {\n\t\t\tinvoke_error_boundary(error, this.#effect && this.#effect.parent);\n\t\t} finally {\n\t\t\tset_active_reaction(previous_reaction);\n\t\t}\n\n\t\tif (failed) {\n\t\t\tqueue_micro_task(() => {\n\t\t\t\tthis.#failed_effect = this.#run(() => {\n\t\t\t\t\tthis.#is_creating_fallback = true;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn branch(() => {\n\t\t\t\t\t\t\tfailed(\n\t\t\t\t\t\t\t\tthis.#anchor,\n\t\t\t\t\t\t\t\t() => error,\n\t\t\t\t\t\t\t\t() => reset\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tinvoke_error_boundary(error, /** @type {Effect} */ (this.#effect.parent));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.#is_creating_fallback = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n *\n * @param {Effect} effect\n * @param {DocumentFragment} fragment\n */\nfunction move_effect(effect, fragment) {\n\tvar node = effect.nodes_start;\n\tvar end = effect.nodes_end;\n\n\twhile (node !== null) {\n\t\t/** @type {TemplateNode | null} */\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n\n\t\tfragment.append(node);\n\t\tnode = next;\n\t}\n}\n\nexport function get_boundary() {\n\treturn /** @type {Boundary} */ (/** @type {Effect} */ (active_effect).b);\n}\n\nexport function pending() {\n\tif (active_effect === null) {\n\t\te.effect_pending_outside_reaction();\n\t}\n\n\tvar boundary = active_effect.b;\n\n\tif (boundary === null) {\n\t\treturn 0; // TODO eventually we will need this to be global\n\t}\n\n\treturn boundary.get_effect_pending();\n}\n","/** @import { Derived, Effect, Source } from '#client' */\n/** @import { Batch } from './batch.js'; */\nimport { DEV } from 'esm-env';\nimport {\n\tERROR_VALUE,\n\tCLEAN,\n\tDERIVED,\n\tDIRTY,\n\tEFFECT_PRESERVED,\n\tMAYBE_DIRTY,\n\tSTALE_REACTION,\n\tUNOWNED,\n\tASYNC\n} from '#client/constants';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tset_signal_status,\n\tskip_reaction,\n\tupdate_reaction,\n\tincrement_write_version,\n\tset_active_effect,\n\tpush_reaction_value,\n\tis_destroying_effect\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport * as w from '../warnings.js';\nimport { async_effect, destroy_effect } from './effects.js';\nimport { inspect_effects, internal_set, set_inspect_effects, source } from './sources.js';\nimport { get_stack } from '../dev/tracing.js';\nimport { async_mode_flag, tracing_mode_flag } from '../../flags/index.js';\nimport { Boundary } from '../dom/blocks/boundary.js';\nimport { component_context } from '../context.js';\nimport { UNINITIALIZED } from '../../../constants.js';\nimport { batch_deriveds, current_batch } from './batch.js';\nimport { unset_context } from './async.js';\n\n/** @type {Effect | null} */\nexport let current_async_effect = null;\n\n/** @param {Effect | null} v */\nexport function set_from_async_derived(v) {\n\tcurrent_async_effect = v;\n}\n\nexport const recent_async_deriveds = new Set();\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tvar flags = DERIVED | DIRTY;\n\tvar parent_derived =\n\t\tactive_reaction !== null && (active_reaction.f & DERIVED) !== 0\n\t\t\t? /** @type {Derived} */ (active_reaction)\n\t\t\t: null;\n\n\tif (active_effect === null || (parent_derived !== null && (parent_derived.f & UNOWNED) !== 0)) {\n\t\tflags |= UNOWNED;\n\t} else {\n\t\t// Since deriveds are evaluated lazily, any effects created inside them are\n\t\t// created too late to ensure that the parent effect is added to the tree\n\t\tactive_effect.f |= EFFECT_PRESERVED;\n\t}\n\n\t/** @type {Derived<V>} */\n\tconst signal = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\teffects: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfn,\n\t\treactions: null,\n\t\trv: 0,\n\t\tv: /** @type {V} */ (UNINITIALIZED),\n\t\twv: 0,\n\t\tparent: parent_derived ?? active_effect,\n\t\tac: null\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = get_stack('CreatedAt');\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V | Promise<V>} fn\n * @param {string} [location] If provided, print a warning if the value is not read immediately after update\n * @returns {Promise<Source<V>>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function async_derived(fn, location) {\n\tlet parent = /** @type {Effect | null} */ (active_effect);\n\n\tif (parent === null) {\n\t\te.async_derived_orphan();\n\t}\n\n\tvar boundary = /** @type {Boundary} */ (parent.b);\n\n\tvar promise = /** @type {Promise<V>} */ (/** @type {unknown} */ (undefined));\n\tvar signal = source(/** @type {V} */ (UNINITIALIZED));\n\n\t/** @type {Promise<V> | null} */\n\tvar prev = null;\n\n\t// only suspend in async deriveds created on initialisation\n\tvar should_suspend = !active_reaction;\n\n\tasync_effect(() => {\n\t\tif (DEV) current_async_effect = active_effect;\n\n\t\ttry {\n\t\t\tvar p = fn();\n\t\t\t// Make sure to always access the then property to read any signals\n\t\t\t// it might access, so that we track them as dependencies.\n\t\t\tif (prev) Promise.resolve(p).catch(() => {}); // avoid unhandled rejection\n\t\t} catch (error) {\n\t\t\tp = Promise.reject(error);\n\t\t}\n\n\t\tif (DEV) current_async_effect = null;\n\n\t\tvar r = () => p;\n\t\tpromise = prev?.then(r, r) ?? Promise.resolve(p);\n\n\t\tprev = promise;\n\n\t\tvar batch = /** @type {Batch} */ (current_batch);\n\t\tvar pending = boundary.is_pending();\n\n\t\tif (should_suspend) {\n\t\t\tboundary.update_pending_count(1);\n\t\t\tif (!pending) batch.increment();\n\t\t}\n\n\t\t/**\n\t\t * @param {any} value\n\t\t * @param {unknown} error\n\t\t */\n\t\tconst handler = (value, error = undefined) => {\n\t\t\tprev = null;\n\n\t\t\tcurrent_async_effect = null;\n\n\t\t\tif (!pending) batch.activate();\n\n\t\t\tif (error) {\n\t\t\t\tif (error !== STALE_REACTION) {\n\t\t\t\t\tsignal.f |= ERROR_VALUE;\n\n\t\t\t\t\t// @ts-expect-error the error is the wrong type, but we don't care\n\t\t\t\t\tinternal_set(signal, error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ((signal.f & ERROR_VALUE) !== 0) {\n\t\t\t\t\tsignal.f ^= ERROR_VALUE;\n\t\t\t\t}\n\n\t\t\t\tinternal_set(signal, value);\n\n\t\t\t\tif (DEV && location !== undefined) {\n\t\t\t\t\trecent_async_deriveds.add(signal);\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (recent_async_deriveds.has(signal)) {\n\t\t\t\t\t\t\tw.await_waterfall(/** @type {string} */ (signal.label), location);\n\t\t\t\t\t\t\trecent_async_deriveds.delete(signal);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (should_suspend) {\n\t\t\t\tboundary.update_pending_count(-1);\n\t\t\t\tif (!pending) batch.decrement();\n\t\t\t}\n\n\t\t\tunset_context();\n\t\t};\n\n\t\tpromise.then(handler, (e) => handler(null, e || 'unknown'));\n\n\t\tif (batch) {\n\t\t\treturn () => {\n\t\t\t\tqueueMicrotask(() => batch.neuter());\n\t\t\t};\n\t\t}\n\t});\n\n\tif (DEV) {\n\t\t// add a flag that lets this be printed as a derived\n\t\t// when using `$inspect.trace()`\n\t\tsignal.f |= ASYNC;\n\t}\n\n\treturn new Promise((fulfil) => {\n\t\t/** @param {Promise<V>} p */\n\t\tfunction next(p) {\n\t\t\tfunction go() {\n\t\t\t\tif (p === promise) {\n\t\t\t\t\tfulfil(signal);\n\t\t\t\t} else {\n\t\t\t\t\t// if the effect re-runs before the initial promise\n\t\t\t\t\t// resolves, delay resolution until we have a value\n\t\t\t\t\tnext(promise);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp.then(go, go);\n\t\t}\n\n\t\tnext(promise);\n\t});\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function user_derived(fn) {\n\tconst d = derived(fn);\n\n\tif (!async_mode_flag) push_reaction_value(d);\n\n\treturn d;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function destroy_derived_effects(derived) {\n\tvar effects = derived.effects;\n\n\tif (effects !== null) {\n\t\tderived.effects = null;\n\n\t\tfor (var i = 0; i < effects.length; i += 1) {\n\t\t\tdestroy_effect(/** @type {Effect} */ (effects[i]));\n\t\t}\n\t}\n}\n\n/**\n * The currently updating deriveds, used to detect infinite recursion\n * in dev mode and provide a nicer error than 'too much recursion'\n * @type {Derived[]}\n */\nlet stack = [];\n\n/**\n * @param {Derived} derived\n * @returns {Effect | null}\n */\nfunction get_derived_parent_effect(derived) {\n\tvar parent = derived.parent;\n\twhile (parent !== null) {\n\t\tif ((parent.f & DERIVED) === 0) {\n\t\t\treturn /** @type {Effect} */ (parent);\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\treturn null;\n}\n\n/**\n * @template T\n * @param {Derived} derived\n * @returns {T}\n */\nexport function execute_derived(derived) {\n\tvar value;\n\tvar prev_active_effect = active_effect;\n\n\tset_active_effect(get_derived_parent_effect(derived));\n\n\tif (DEV) {\n\t\tlet prev_inspect_effects = inspect_effects;\n\t\tset_inspect_effects(new Set());\n\t\ttry {\n\t\t\tif (stack.includes(derived)) {\n\t\t\t\te.derived_references_self();\n\t\t\t}\n\n\t\t\tstack.push(derived);\n\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t\tset_inspect_effects(prev_inspect_effects);\n\t\t\tstack.pop();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function update_derived(derived) {\n\tvar value = execute_derived(derived);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tderived.wv = increment_write_version();\n\t}\n\n\t// don't mark derived clean if we're reading it inside a\n\t// cleanup function, or it will cache a stale value\n\tif (is_destroying_effect) {\n\t\treturn;\n\t}\n\n\tif (batch_deriveds !== null) {\n\t\tbatch_deriveds.set(derived, derived.v);\n\t} else {\n\t\tvar status =\n\t\t\t(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\n\n\t\tset_signal_status(derived, status);\n\t}\n}\n","/** @import { Derived, Effect, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tuntracked_writes,\n\tget,\n\tset_untracked_writes,\n\tset_signal_status,\n\tuntrack,\n\tincrement_write_version,\n\tupdate_effect,\n\tcurrent_sources,\n\tis_dirty,\n\tuntracking,\n\tis_destroying_effect,\n\tpush_reaction_value\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport {\n\tCLEAN,\n\tDERIVED,\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tINSPECT_EFFECT,\n\tUNOWNED,\n\tMAYBE_DIRTY,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tASYNC\n} from '#client/constants';\nimport * as e from '../errors.js';\nimport { legacy_mode_flag, tracing_mode_flag } from '../../flags/index.js';\nimport { get_stack, tag_proxy } from '../dev/tracing.js';\nimport { component_context, is_runes } from '../context.js';\nimport { Batch, eager_block_effects, schedule_effect } from './batch.js';\nimport { proxy } from '../proxy.js';\nimport { execute_derived } from './deriveds.js';\n\n/** @type {Set<any>} */\nexport let inspect_effects = new Set();\n\n/** @type {Map<Source, any>} */\nexport const old_values = new Map();\n\n/**\n * @param {Set<any>} v\n */\nexport function set_inspect_effects(v) {\n\tinspect_effects = v;\n}\n\nlet inspect_effects_deferred = false;\n\nexport function set_inspect_effects_deferred() {\n\tinspect_effects_deferred = true;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n * @returns {Source<V>}\n */\n// TODO rename this to `state` throughout the codebase\nexport function source(v, stack) {\n\t/** @type {Value} */\n\tvar signal = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\tv,\n\t\treactions: null,\n\t\tequals,\n\t\trv: 0,\n\t\twv: 0\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = stack ?? get_stack('CreatedAt');\n\t\tsignal.updated = null;\n\t\tsignal.set_during_effect = false;\n\t\tsignal.trace = null;\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function state(v, stack) {\n\tconst s = source(v, stack);\n\n\tpush_reaction_value(s);\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @param {boolean} [immutable]\n * @returns {Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value, immutable = false, trackable = true) {\n\tconst s = source(initial_value);\n\tif (!immutable) {\n\t\ts.equals = safe_equals;\n\t}\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (legacy_mode_flag && trackable && component_context !== null && component_context.l !== null) {\n\t\t(component_context.l.s ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @param {boolean} [should_proxy]\n * @returns {V}\n */\nexport function set(source, value, should_proxy = false) {\n\tif (\n\t\tactive_reaction !== null &&\n\t\t// since we are untracking the function inside `$inspect.with` we need to add this check\n\t\t// to ensure we error if state is set inside an inspect effect\n\t\t(!untracking || (active_reaction.f & INSPECT_EFFECT) !== 0) &&\n\t\tis_runes() &&\n\t\t(active_reaction.f & (DERIVED | BLOCK_EFFECT | ASYNC | INSPECT_EFFECT)) !== 0 &&\n\t\t!current_sources?.includes(source)\n\t) {\n\t\te.state_unsafe_mutation();\n\t}\n\n\tlet new_value = should_proxy ? proxy(value) : value;\n\n\tif (DEV) {\n\t\ttag_proxy(new_value, /** @type {string} */ (source.label));\n\t}\n\n\treturn internal_set(source, new_value);\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @returns {V}\n */\nexport function internal_set(source, value) {\n\tif (!source.equals(value)) {\n\t\tvar old_value = source.v;\n\n\t\tif (is_destroying_effect) {\n\t\t\told_values.set(source, value);\n\t\t} else {\n\t\t\told_values.set(source, old_value);\n\t\t}\n\n\t\tsource.v = value;\n\n\t\tvar batch = Batch.ensure();\n\t\tbatch.capture(source, old_value);\n\n\t\tif (DEV) {\n\t\t\tif (tracing_mode_flag || active_effect !== null) {\n\t\t\t\tconst error = get_stack('UpdatedAt');\n\n\t\t\t\tif (error !== null) {\n\t\t\t\t\tsource.updated ??= new Map();\n\t\t\t\t\tlet entry = source.updated.get(error.stack);\n\n\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\tentry = { error, count: 0 };\n\t\t\t\t\t\tsource.updated.set(error.stack, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tentry.count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (active_effect !== null) {\n\t\t\t\tsource.set_during_effect = true;\n\t\t\t}\n\t\t}\n\n\t\tif ((source.f & DERIVED) !== 0) {\n\t\t\t// if we are assigning to a dirty derived we set it to clean/maybe dirty but we also eagerly execute it to track the dependencies\n\t\t\tif ((source.f & DIRTY) !== 0) {\n\t\t\t\texecute_derived(/** @type {Derived} */ (source));\n\t\t\t}\n\t\t\tset_signal_status(source, (source.f & UNOWNED) === 0 ? CLEAN : MAYBE_DIRTY);\n\t\t}\n\n\t\tsource.wv = increment_write_version();\n\n\t\tmark_reactions(source, DIRTY);\n\n\t\t// It's possible that the current reaction might not have up-to-date dependencies\n\t\t// whilst it's actively running. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e: `$effect(() => x++)`\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tactive_effect !== null &&\n\t\t\t(active_effect.f & CLEAN) !== 0 &&\n\t\t\t(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0\n\t\t) {\n\t\t\tif (untracked_writes === null) {\n\t\t\t\tset_untracked_writes([source]);\n\t\t\t} else {\n\t\t\t\tuntracked_writes.push(source);\n\t\t\t}\n\t\t}\n\n\t\tif (DEV && inspect_effects.size > 0 && !inspect_effects_deferred) {\n\t\t\tflush_inspect_effects();\n\t\t}\n\t}\n\n\treturn value;\n}\n\nexport function flush_inspect_effects() {\n\tinspect_effects_deferred = false;\n\n\tconst inspects = Array.from(inspect_effects);\n\n\tfor (const effect of inspects) {\n\t\t// Mark clean inspect-effects as maybe dirty and then check their dirtiness\n\t\t// instead of just updating the effects - this way we avoid overfiring.\n\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t}\n\n\t\tif (is_dirty(effect)) {\n\t\t\tupdate_effect(effect);\n\t\t}\n\t}\n\n\tinspect_effects.clear();\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update(source, d = 1) {\n\tvar value = get(source);\n\tvar result = d === 1 ? value++ : value--;\n\n\tset(source, value);\n\n\t// @ts-expect-error\n\treturn result;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update_pre(source, d = 1) {\n\tvar value = get(source);\n\n\t// @ts-expect-error\n\treturn set(source, d === 1 ? ++value : --value);\n}\n\n/**\n * Silently (without using `get`) increment a source\n * @param {Source<number>} source\n */\nexport function increment(source) {\n\tset(source, source.v + 1);\n}\n\n/**\n * @param {Value} signal\n * @param {number} status should be DIRTY or MAYBE_DIRTY\n * @returns {void}\n */\nfunction mark_reactions(signal, status) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\t\tvar flags = reaction.f;\n\n\t\t// In legacy mode, skip the current effect to prevent infinite loops\n\t\tif (!runes && reaction === active_effect) continue;\n\n\t\t// Inspect effects need to run immediately, so that the stack trace makes sense\n\t\tif (DEV && (flags & INSPECT_EFFECT) !== 0) {\n\t\t\tinspect_effects.add(reaction);\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar not_dirty = (flags & DIRTY) === 0;\n\n\t\t// don't set a DIRTY reaction to MAYBE_DIRTY\n\t\tif (not_dirty) {\n\t\t\tset_signal_status(reaction, status);\n\t\t}\n\n\t\tif ((flags & DERIVED) !== 0) {\n\t\t\tmark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);\n\t\t} else if (not_dirty) {\n\t\t\tif ((flags & BLOCK_EFFECT) !== 0) {\n\t\t\t\tif (eager_block_effects !== null) {\n\t\t\t\t\teager_block_effects.push(/** @type {Effect} */ (reaction));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t}\n\t}\n}\n","/** @import { Source } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tget,\n\tactive_effect,\n\tupdate_version,\n\tactive_reaction,\n\tset_update_version,\n\tset_active_reaction\n} from './runtime.js';\nimport {\n\tarray_prototype,\n\tget_descriptor,\n\tget_prototype_of,\n\tis_array,\n\tobject_prototype\n} from '../shared/utils.js';\nimport {\n\tstate as source,\n\tset,\n\tincrement,\n\tflush_inspect_effects,\n\tset_inspect_effects_deferred\n} from './reactivity/sources.js';\nimport { PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\nimport { UNINITIALIZED } from '../../constants.js';\nimport * as e from './errors.js';\nimport { get_stack, tag } from './dev/tracing.js';\nimport { tracing_mode_flag } from '../flags/index.js';\n\n// TODO move all regexes into shared module?\nconst regex_is_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\n/**\n * @template T\n * @param {T} value\n * @returns {T}\n */\nexport function proxy(value) {\n\t// if non-proxyable, or is already a proxy, return `value`\n\tif (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {\n\t\treturn value;\n\t}\n\n\tconst prototype = get_prototype_of(value);\n\n\tif (prototype !== object_prototype && prototype !== array_prototype) {\n\t\treturn value;\n\t}\n\n\t/** @type {Map<any, Source<any>>} */\n\tvar sources = new Map();\n\tvar is_proxied_array = is_array(value);\n\tvar version = source(0);\n\n\tvar stack = DEV && tracing_mode_flag ? get_stack('CreatedAt') : null;\n\tvar parent_version = update_version;\n\n\t/**\n\t * Executes the proxy in the context of the reaction it was originally created in, if any\n\t * @template T\n\t * @param {() => T} fn\n\t */\n\tvar with_parent = (fn) => {\n\t\tif (update_version === parent_version) {\n\t\t\treturn fn();\n\t\t}\n\n\t\t// child source is being created after the initial proxy —\n\t\t// prevent it from being associated with the current reaction\n\t\tvar reaction = active_reaction;\n\t\tvar version = update_version;\n\n\t\tset_active_reaction(null);\n\t\tset_update_version(parent_version);\n\n\t\tvar result = fn();\n\n\t\tset_active_reaction(reaction);\n\t\tset_update_version(version);\n\n\t\treturn result;\n\t};\n\n\tif (is_proxied_array) {\n\t\t// We need to create the length source eagerly to ensure that\n\t\t// mutations to the array are properly synced with our proxy\n\t\tsources.set('length', source(/** @type {any[]} */ (value).length, stack));\n\t\tif (DEV) {\n\t\t\tvalue = /** @type {any} */ (inspectable_array(/** @type {any[]} */ (value)));\n\t\t}\n\t}\n\n\t/** Used in dev for $inspect.trace() */\n\tvar path = '';\n\tlet updating = false;\n\t/** @param {string} new_path */\n\tfunction update_path(new_path) {\n\t\tif (updating) return;\n\t\tupdating = true;\n\t\tpath = new_path;\n\n\t\ttag(version, `${path} version`);\n\n\t\t// rename all child sources and child proxies\n\t\tfor (const [prop, source] of sources) {\n\t\t\ttag(source, get_label(path, prop));\n\t\t}\n\t\tupdating = false;\n\t}\n\n\treturn new Proxy(/** @type {any} */ (value), {\n\t\tdefineProperty(_, prop, descriptor) {\n\t\t\tif (\n\t\t\t\t!('value' in descriptor) ||\n\t\t\t\tdescriptor.configurable === false ||\n\t\t\t\tdescriptor.enumerable === false ||\n\t\t\t\tdescriptor.writable === false\n\t\t\t) {\n\t\t\t\t// we disallow non-basic descriptors, because unless they are applied to the\n\t\t\t\t// target object — which we avoid, so that state can be forked — we will run\n\t\t\t\t// afoul of the various invariants\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants\n\t\t\t\te.state_descriptors_fixed();\n\t\t\t}\n\t\t\tvar s = sources.get(prop);\n\t\t\tif (s === undefined) {\n\t\t\t\ts = with_parent(() => {\n\t\t\t\t\tvar s = source(descriptor.value, stack);\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t\tif (DEV && typeof prop === 'string') {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t\treturn s;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tset(s, descriptor.value, true);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tdeleteProperty(target, prop) {\n\t\t\tvar s = sources.get(prop);\n\n\t\t\tif (s === undefined) {\n\t\t\t\tif (prop in target) {\n\t\t\t\t\tconst s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t\tincrement(version);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tset(s, UNINITIALIZED);\n\t\t\t\tincrement(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (DEV && prop === PROXY_PATH_SYMBOL) {\n\t\t\t\treturn update_path;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar exists = prop in target;\n\n\t\t\t// create a source, but only if it's an own property and not a prototype property\n\t\t\tif (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {\n\t\t\t\ts = with_parent(() => {\n\t\t\t\t\tvar p = proxy(exists ? target[prop] : UNINITIALIZED);\n\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s;\n\t\t\t\t});\n\n\t\t\t\tsources.set(prop, s);\n\t\t\t}\n\n\t\t\tif (s !== undefined) {\n\t\t\t\tvar v = get(s);\n\t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n\t\t\t}\n\n\t\t\treturn Reflect.get(target, prop, receiver);\n\t\t},\n\n\t\tgetOwnPropertyDescriptor(target, prop) {\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\tif (descriptor && 'value' in descriptor) {\n\t\t\t\tvar s = sources.get(prop);\n\t\t\t\tif (s) descriptor.value = get(s);\n\t\t\t} else if (descriptor === undefined) {\n\t\t\t\tvar source = sources.get(prop);\n\t\t\t\tvar value = source?.v;\n\n\t\t\t\tif (source !== undefined && value !== UNINITIALIZED) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\twritable: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn descriptor;\n\t\t},\n\n\t\thas(target, prop) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);\n\n\t\t\tif (\n\t\t\t\ts !== undefined ||\n\t\t\t\t(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))\n\t\t\t) {\n\t\t\t\tif (s === undefined) {\n\t\t\t\t\ts = with_parent(() => {\n\t\t\t\t\t\tvar p = has ? proxy(target[prop]) : UNINITIALIZED;\n\t\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t});\n\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t}\n\n\t\t\t\tvar value = get(s);\n\t\t\t\tif (value === UNINITIALIZED) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn has;\n\t\t},\n\n\t\tset(target, prop, value, receiver) {\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = prop in target;\n\n\t\t\t// variable.length = value -> clear all signals with index >= value\n\t\t\tif (is_proxied_array && prop === 'length') {\n\t\t\t\tfor (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {\n\t\t\t\t\tvar other_s = sources.get(i + '');\n\t\t\t\t\tif (other_s !== undefined) {\n\t\t\t\t\t\tset(other_s, UNINITIALIZED);\n\t\t\t\t\t} else if (i in target) {\n\t\t\t\t\t\t// If the item exists in the original, we need to create a uninitialized source,\n\t\t\t\t\t\t// else a later read of the property would result in a source being created with\n\t\t\t\t\t\t// the value of the original item at that index.\n\t\t\t\t\t\tother_s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\t\tsources.set(i + '', other_s);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(other_s, get_label(path, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we haven't yet created a source for this property, we need to ensure\n\t\t\t// we do so otherwise if we read it later, then the write won't be tracked and\n\t\t\t// the heuristics of effects will be different vs if we had read the proxied\n\t\t\t// object property before writing to that property.\n\t\t\tif (s === undefined) {\n\t\t\t\tif (!has || get_descriptor(target, prop)?.writable) {\n\t\t\t\t\ts = with_parent(() => source(undefined, stack));\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t\tset(s, proxy(value));\n\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thas = s.v !== UNINITIALIZED;\n\n\t\t\t\tvar p = with_parent(() => proxy(value));\n\t\t\t\tset(s, p);\n\t\t\t}\n\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\t// Set the new value before updating any signals so that any listeners get the new value\n\t\t\tif (descriptor?.set) {\n\t\t\t\tdescriptor.set.call(receiver, value);\n\t\t\t}\n\n\t\t\tif (!has) {\n\t\t\t\t// If we have mutated an array directly, we might need to\n\t\t\t\t// signal that length has also changed. Do it before updating metadata\n\t\t\t\t// to ensure that iterating over the array as a result of a metadata update\n\t\t\t\t// will not cause the length to be out of sync.\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\n\t\t\t\t\tvar n = Number(prop);\n\n\t\t\t\t\tif (Number.isInteger(n) && n >= ls.v) {\n\t\t\t\t\t\tset(ls, n + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tincrement(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\townKeys(target) {\n\t\t\tget(version);\n\n\t\t\tvar own_keys = Reflect.ownKeys(target).filter((key) => {\n\t\t\t\tvar source = sources.get(key);\n\t\t\t\treturn source === undefined || source.v !== UNINITIALIZED;\n\t\t\t});\n\n\t\t\tfor (var [key, source] of sources) {\n\t\t\t\tif (source.v !== UNINITIALIZED && !(key in target)) {\n\t\t\t\t\town_keys.push(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn own_keys;\n\t\t},\n\n\t\tsetPrototypeOf() {\n\t\t\te.state_prototype_fixed();\n\t\t}\n\t});\n}\n\n/**\n * @param {string} path\n * @param {string | symbol} prop\n */\nfunction get_label(path, prop) {\n\tif (typeof prop === 'symbol') return `${path}[Symbol(${prop.description ?? ''})]`;\n\tif (regex_is_valid_identifier.test(prop)) return `${path}.${prop}`;\n\treturn /^\\d+$/.test(prop) ? `${path}[${prop}]` : `${path}['${prop}']`;\n}\n\n/**\n * @param {any} value\n */\nexport function get_proxied_value(value) {\n\ttry {\n\t\tif (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {\n\t\t\treturn value[STATE_SYMBOL];\n\t\t}\n\t} catch {\n\t\t// the above if check can throw an error if the value in question\n\t\t// is the contentWindow of an iframe on another domain, in which\n\t\t// case we want to just return the value (because it's definitely\n\t\t// not a proxied value) so we don't break any JavaScript interacting\n\t\t// with that iframe (such as various payment companies client side\n\t\t// JavaScript libraries interacting with their iframes on the same\n\t\t// domain)\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {any} a\n * @param {any} b\n */\nexport function is(a, b) {\n\treturn Object.is(get_proxied_value(a), get_proxied_value(b));\n}\n\nconst ARRAY_MUTATING_METHODS = new Set([\n\t'copyWithin',\n\t'fill',\n\t'pop',\n\t'push',\n\t'reverse',\n\t'shift',\n\t'sort',\n\t'splice',\n\t'unshift'\n]);\n\n/**\n * Wrap array mutating methods so $inspect is triggered only once and\n * to prevent logging an array in intermediate state (e.g. with an empty slot)\n * @param {any[]} array\n */\nfunction inspectable_array(array) {\n\treturn new Proxy(array, {\n\t\tget(target, prop, receiver) {\n\t\t\tvar value = Reflect.get(target, prop, receiver);\n\t\t\tif (!ARRAY_MUTATING_METHODS.has(/** @type {string} */ (prop))) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @this {any[]}\n\t\t\t * @param {any[]} args\n\t\t\t */\n\t\t\treturn function (...args) {\n\t\t\t\tset_inspect_effects_deferred();\n\t\t\t\tvar result = value.apply(this, args);\n\t\t\t\tflush_inspect_effects();\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t});\n}\n","/** @import { Effect, TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\nimport { DEV } from 'esm-env';\nimport { init_array_prototype_warnings } from '../dev/equality.js';\nimport { get_descriptor, is_extensible } from '../../shared/utils.js';\nimport { active_effect } from '../runtime.js';\nimport { async_mode_flag } from '../../flags/index.js';\nimport { TEXT_NODE, EFFECT_RAN } from '#client/constants';\nimport { eager_block_effects } from '../reactivity/batch.js';\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/** @type {Window} */\nexport var $window;\n\n/** @type {Document} */\nexport var $document;\n\n/** @type {boolean} */\nexport var is_firefox;\n\n/** @type {() => Node | null} */\nvar first_child_getter;\n/** @type {() => Node | null} */\nvar next_sibling_getter;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif ($window !== undefined) {\n\t\treturn;\n\t}\n\n\t$window = window;\n\t$document = document;\n\tis_firefox = /Firefox/.test(navigator.userAgent);\n\n\tvar element_prototype = Element.prototype;\n\tvar node_prototype = Node.prototype;\n\tvar text_prototype = Text.prototype;\n\n\t// @ts-ignore\n\tfirst_child_getter = get_descriptor(node_prototype, 'firstChild').get;\n\t// @ts-ignore\n\tnext_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;\n\n\tif (is_extensible(element_prototype)) {\n\t\t// the following assignments improve perf of lookups on DOM nodes\n\t\t// @ts-expect-error\n\t\telement_prototype.__click = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__className = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__attributes = null;\n\t\t// @ts-expect-error\n\t\telement_prototype.__style = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__e = undefined;\n\t}\n\n\tif (is_extensible(text_prototype)) {\n\t\t// @ts-expect-error\n\t\ttext_prototype.__t = undefined;\n\t}\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\telement_prototype.__svelte_meta = null;\n\n\t\tinit_array_prototype_warnings();\n\t}\n}\n\n/**\n * @param {string} value\n * @returns {Text}\n */\nexport function create_text(value = '') {\n\treturn document.createTextNode(value);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_first_child(node) {\n\treturn first_child_getter.call(node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_next_sibling(node) {\n\treturn next_sibling_getter.call(node);\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function child(node, is_text) {\n\tif (!hydrating) {\n\t\treturn get_first_child(node);\n\t}\n\n\tvar child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\tchild = hydrate_node.appendChild(create_text());\n\t} else if (is_text && child.nodeType !== TEXT_NODE) {\n\t\tvar text = create_text();\n\t\tchild?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(child);\n\treturn child;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {DocumentFragment | TemplateNode | TemplateNode[]} fragment\n * @param {boolean} [is_text]\n * @returns {Node | null}\n */\nexport function first_child(fragment, is_text = false) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\tvar first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));\n\n\t\t// TODO prevent user comments with the empty string when preserveComments is true\n\t\tif (first instanceof Comment && first.data === '') return get_next_sibling(first);\n\n\t\treturn first;\n\t}\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && hydrate_node?.nodeType !== TEXT_NODE) {\n\t\tvar text = create_text();\n\n\t\thydrate_node?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_node;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {TemplateNode} node\n * @param {number} count\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function sibling(node, count = 1, is_text = false) {\n\tlet next_sibling = hydrating ? hydrate_node : node;\n\tvar last_sibling;\n\n\twhile (count--) {\n\t\tlast_sibling = next_sibling;\n\t\tnext_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));\n\t}\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && next_sibling?.nodeType !== TEXT_NODE) {\n\t\tvar text = create_text();\n\t\t// If the next sibling is `null` and we're handling text then it's because\n\t\t// the SSR content was empty for the text, so we need to generate a new text\n\t\t// node and insert it after the last sibling\n\t\tif (next_sibling === null) {\n\t\t\tlast_sibling?.after(text);\n\t\t} else {\n\t\t\tnext_sibling.before(text);\n\t\t}\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(next_sibling);\n\treturn /** @type {TemplateNode} */ (next_sibling);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\tnode.textContent = '';\n}\n\n/**\n * Returns `true` if we're updating the current block, for example `condition` in\n * an `{#if condition}` block just changed. In this case, the branch should be\n * appended (or removed) at the same time as other updates within the\n * current `<svelte:boundary>`\n */\nexport function should_defer_append() {\n\tif (!async_mode_flag) return false;\n\tif (eager_block_effects !== null) return false;\n\n\tvar flags = /** @type {Effect} */ (active_effect).f;\n\treturn (flags & EFFECT_RAN) !== 0;\n}\n\n/**\n *\n * @param {string} tag\n * @param {string} [namespace]\n * @param {string} [is]\n * @returns\n */\nexport function create_element(tag, namespace, is) {\n\tlet options = is ? { is } : undefined;\n\tif (namespace) {\n\t\treturn document.createElementNS(namespace, tag, options);\n\t}\n\treturn document.createElement(tag, options);\n}\n\nexport function create_fragment() {\n\treturn document.createDocumentFragment();\n}\n\n/**\n * @param {string} data\n * @returns\n */\nexport function create_comment(data = '') {\n\treturn document.createComment(data);\n}\n\n/**\n * @param {Element} element\n * @param {string} key\n * @param {string} value\n * @returns\n */\nexport function set_attribute(element, key, value = '') {\n\tif (key.startsWith('xlink:')) {\n\t\telement.setAttributeNS('http://www.w3.org/1999/xlink', key, value);\n\t\treturn;\n\t}\n\treturn element.setAttribute(key, value);\n}\n","import { teardown } from '../../../reactivity/effects.js';\nimport {\n\tactive_effect,\n\tactive_reaction,\n\tset_active_effect,\n\tset_active_reaction\n} from '../../../runtime.js';\nimport { add_form_reset_listener } from '../misc.js';\n\n/**\n * Fires the handler once immediately (unless corresponding arg is set to `false`),\n * then listens to the given events until the render effect context is destroyed\n * @param {EventTarget} target\n * @param {Array<string>} events\n * @param {(event?: Event) => void} handler\n * @param {any} call_handler_immediately\n */\nexport function listen(target, events, handler, call_handler_immediately = true) {\n\tif (call_handler_immediately) {\n\t\thandler();\n\t}\n\n\tfor (var name of events) {\n\t\ttarget.addEventListener(name, handler);\n\t}\n\n\tteardown(() => {\n\t\tfor (var name of events) {\n\t\t\ttarget.removeEventListener(name, handler);\n\t\t}\n\t});\n}\n\n/**\n * @template T\n * @param {() => T} fn\n */\nexport function without_reactive_context(fn) {\n\tvar previous_reaction = active_reaction;\n\tvar previous_effect = active_effect;\n\tset_active_reaction(null);\n\tset_active_effect(null);\n\ttry {\n\t\treturn fn();\n\t} finally {\n\t\tset_active_reaction(previous_reaction);\n\t\tset_active_effect(previous_effect);\n\t}\n}\n\n/**\n * Listen to the given event, and then instantiate a global form reset listener if not already done,\n * to notify all bindings when the form is reset\n * @param {HTMLElement} element\n * @param {string} event\n * @param {(is_reset?: true) => void} handler\n * @param {(is_reset?: true) => void} [on_reset]\n */\nexport function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {\n\telement.addEventListener(event, () => without_reactive_context(handler));\n\t// @ts-expect-error\n\tconst prev = element.__on_r;\n\tif (prev) {\n\t\t// special case for checkbox that can have multiple binds (group & checked)\n\t\t// @ts-expect-error\n\t\telement.__on_r = () => {\n\t\t\tprev();\n\t\t\ton_reset(true);\n\t\t};\n\t} else {\n\t\t// @ts-expect-error\n\t\telement.__on_r = () => on_reset(true);\n\t}\n\n\tadd_form_reset_listener();\n}\n","/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */\nimport {\n\tis_dirty,\n\tactive_effect,\n\tactive_reaction,\n\tupdate_effect,\n\tget,\n\tis_destroying_effect,\n\tremove_reactions,\n\tset_active_reaction,\n\tset_is_destroying_effect,\n\tset_signal_status,\n\tuntrack,\n\tuntracking\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tEFFECT_TRANSPARENT,\n\tDERIVED,\n\tUNOWNED,\n\tCLEAN,\n\tINSPECT_EFFECT,\n\tHEAD_EFFECT,\n\tMAYBE_DIRTY,\n\tEFFECT_PRESERVED,\n\tSTALE_REACTION,\n\tUSER_EFFECT,\n\tASYNC\n} from '#client/constants';\nimport * as e from '../errors.js';\nimport { DEV } from 'esm-env';\nimport { define_property } from '../../shared/utils.js';\nimport { get_next_sibling } from '../dom/operations.js';\nimport { component_context, dev_current_component_function, dev_stack } from '../context.js';\nimport { Batch, schedule_effect } from './batch.js';\nimport { flatten } from './async.js';\nimport { without_reactive_context } from '../dom/elements/bindings/shared.js';\n\n/**\n * @param {'$effect' | '$effect.pre' | '$inspect'} rune\n */\nexport function validate_effect(rune) {\n\tif (active_effect === null && active_reaction === null) {\n\t\te.effect_orphan(rune);\n\t}\n\n\tif (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0 && active_effect === null) {\n\t\te.effect_in_unowned_derived();\n\t}\n\n\tif (is_destroying_effect) {\n\t\te.effect_in_teardown(rune);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {Effect} parent_effect\n */\nfunction push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {null | (() => void | (() => void))} fn\n * @param {boolean} sync\n * @param {boolean} push\n * @returns {Effect}\n */\nfunction create_effect(type, fn, sync, push = true) {\n\tvar parent = active_effect;\n\n\tif (DEV) {\n\t\t// Ensure the parent is never an inspect effect\n\t\twhile (parent !== null && (parent.f & INSPECT_EFFECT) !== 0) {\n\t\t\tparent = parent.parent;\n\t\t}\n\t}\n\n\tif (parent !== null && (parent.f & INERT) !== 0) {\n\t\ttype |= INERT;\n\t}\n\n\t/** @type {Effect} */\n\tvar effect = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\tnodes_start: null,\n\t\tnodes_end: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent,\n\t\tb: parent && parent.b,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null,\n\t\twv: 0,\n\t\tac: null\n\t};\n\n\tif (DEV) {\n\t\teffect.component_function = dev_current_component_function;\n\t}\n\n\tif (sync) {\n\t\ttry {\n\t\t\tupdate_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} catch (e) {\n\t\t\tdestroy_effect(effect);\n\t\t\tthrow e;\n\t\t}\n\t} else if (fn !== null) {\n\t\tschedule_effect(effect);\n\t}\n\n\tif (push) {\n\t\t/** @type {Effect | null} */\n\t\tvar e = effect;\n\n\t\t// if an effect has already ran and doesn't need to be kept in the tree\n\t\t// (because it won't re-run, has no DOM, and has no teardown etc)\n\t\t// then we skip it and go to its child (if any)\n\t\tif (\n\t\t\tsync &&\n\t\t\te.deps === null &&\n\t\t\te.teardown === null &&\n\t\t\te.nodes_start === null &&\n\t\t\te.first === e.last && // either `null`, or a singular child\n\t\t\t(e.f & EFFECT_PRESERVED) === 0\n\t\t) {\n\t\t\te = e.first;\n\t\t}\n\n\t\tif (e !== null) {\n\t\t\te.parent = parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tpush_effect(e, parent);\n\t\t\t}\n\n\t\t\t// if we're in a derived, add the effect there too\n\t\t\tif (\n\t\t\t\tactive_reaction !== null &&\n\t\t\t\t(active_reaction.f & DERIVED) !== 0 &&\n\t\t\t\t(type & ROOT_EFFECT) === 0\n\t\t\t) {\n\t\t\t\tvar derived = /** @type {Derived} */ (active_reaction);\n\t\t\t\t(derived.effects ??= []).push(e);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.tracking()`\n * @returns {boolean}\n */\nexport function effect_tracking() {\n\treturn active_reaction !== null && !untracking;\n}\n\n/**\n * @param {() => void} fn\n */\nexport function teardown(fn) {\n\tconst effect = create_effect(RENDER_EFFECT, null, false);\n\tset_signal_status(effect, CLEAN);\n\teffect.teardown = fn;\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tvalidate_effect('$effect');\n\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect'\n\t\t});\n\t}\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tvar flags = /** @type {Effect} */ (active_effect).f;\n\tvar defer = !active_reaction && (flags & BRANCH_EFFECT) !== 0 && (flags & EFFECT_RAN) === 0;\n\n\tif (defer) {\n\t\t// Top-level `$effect(...)` in an unmounted component — defer until mount\n\t\tvar context = /** @type {ComponentContext} */ (component_context);\n\t\t(context.e ??= []).push(fn);\n\t} else {\n\t\t// Everything else — create immediately\n\t\treturn create_user_effect(fn);\n\t}\n}\n\n/**\n * @param {() => void | (() => void)} fn\n */\nexport function create_user_effect(fn) {\n\treturn create_effect(EFFECT | USER_EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function user_pre_effect(fn) {\n\tvalidate_effect('$effect.pre');\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect.pre'\n\t\t});\n\t}\n\treturn create_effect(RENDER_EFFECT | USER_EFFECT, fn, true);\n}\n\n/** @param {() => void | (() => void)} fn */\nexport function inspect_effect(fn) {\n\treturn create_effect(INSPECT_EFFECT, fn, true);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\tBatch.ensure();\n\tconst effect = create_effect(ROOT_EFFECT | EFFECT_PRESERVED, fn, true);\n\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * An effect root whose children can transition out\n * @param {() => void} fn\n * @returns {(options?: { outro?: boolean }) => Promise<void>}\n */\nexport function component_root(fn) {\n\tBatch.ensure();\n\tconst effect = create_effect(ROOT_EFFECT | EFFECT_PRESERVED, fn, true);\n\n\treturn (options = {}) => {\n\t\treturn new Promise((fulfil) => {\n\t\t\tif (options.outro) {\n\t\t\t\tpause_effect(effect, () => {\n\t\t\t\t\tdestroy_effect(effect);\n\t\t\t\t\tfulfil(undefined);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdestroy_effect(effect);\n\t\t\t\tfulfil(undefined);\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\t/** @type {{ effect: null | Effect, ran: boolean, deps: () => any }} */\n\tvar token = { effect: null, ran: false, deps };\n\n\tcontext.l.$.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\trender_effect(() => {\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l.$) {\n\t\t\ttoken.deps();\n\n\t\t\tvar effect = token.effect;\n\n\t\t\t// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through\n\t\t\t// the effects dependencies and correctly ensure each dependency is up-to-date.\n\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t}\n\n\t\t\tif (is_dirty(effect)) {\n\t\t\t\tupdate_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function async_effect(fn) {\n\treturn create_effect(ASYNC | EFFECT_PRESERVED, fn, true);\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function render_effect(fn, flags = 0) {\n\treturn create_effect(RENDER_EFFECT | flags, fn, true);\n}\n\n/**\n * @param {(...expressions: any) => void | (() => void)} fn\n * @param {Array<() => any>} sync\n * @param {Array<() => Promise<any>>} async\n */\nexport function template_effect(fn, sync = [], async = []) {\n\tflatten(sync, async, (values) => {\n\t\tcreate_effect(RENDER_EFFECT, () => fn(...values.map(get)), true);\n\t});\n}\n\n/**\n * @param {(() => void)} fn\n * @param {number} flags\n */\nexport function block(fn, flags = 0) {\n\tvar effect = create_effect(BLOCK_EFFECT | flags, fn, true);\n\tif (DEV) {\n\t\teffect.dev_stack = dev_stack;\n\t}\n\treturn effect;\n}\n\n/**\n * @param {(() => void)} fn\n * @param {boolean} [push]\n */\nexport function branch(fn, push = true) {\n\treturn create_effect(BRANCH_EFFECT | EFFECT_PRESERVED, fn, true, push);\n}\n\n/**\n * @param {Effect} effect\n */\nexport function execute_effect_teardown(effect) {\n\tvar teardown = effect.teardown;\n\tif (teardown !== null) {\n\t\tconst previously_destroying_effect = is_destroying_effect;\n\t\tconst previous_reaction = active_reaction;\n\t\tset_is_destroying_effect(true);\n\t\tset_active_reaction(null);\n\t\ttry {\n\t\t\tteardown.call(null);\n\t\t} finally {\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\n\t\t\tset_active_reaction(previous_reaction);\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @param {boolean} remove_dom\n * @returns {void}\n */\nexport function destroy_effect_children(signal, remove_dom = false) {\n\tvar effect = signal.first;\n\tsignal.first = signal.last = null;\n\n\twhile (effect !== null) {\n\t\tconst controller = effect.ac;\n\n\t\tif (controller !== null) {\n\t\t\twithout_reactive_context(() => {\n\t\t\t\tcontroller.abort(STALE_REACTION);\n\t\t\t});\n\t\t}\n\n\t\tvar next = effect.next;\n\n\t\tif ((effect.f & ROOT_EFFECT) !== 0) {\n\t\t\t// this is now an independent root\n\t\t\teffect.parent = null;\n\t\t} else {\n\t\t\tdestroy_effect(effect, remove_dom);\n\t\t}\n\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function destroy_block_effect_children(signal) {\n\tvar effect = signal.first;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\t\tif ((effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tdestroy_effect(effect);\n\t\t}\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} [remove_dom]\n * @returns {void}\n */\nexport function destroy_effect(effect, remove_dom = true) {\n\tvar removed = false;\n\n\tif (\n\t\t(remove_dom || (effect.f & HEAD_EFFECT) !== 0) &&\n\t\teffect.nodes_start !== null &&\n\t\teffect.nodes_end !== null\n\t) {\n\t\tremove_effect_dom(effect.nodes_start, /** @type {TemplateNode} */ (effect.nodes_end));\n\t\tremoved = true;\n\t}\n\n\tdestroy_effect_children(effect, remove_dom && !removed);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tvar transitions = effect.transitions;\n\n\tif (transitions !== null) {\n\t\tfor (const transition of transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\texecute_effect_teardown(effect);\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && parent.first !== null) {\n\t\tunlink_effect(effect);\n\t}\n\n\tif (DEV) {\n\t\teffect.component_function = null;\n\t}\n\n\t// `first` and `child` are nulled out in destroy_effect_children\n\t// we don't null out `parent` so that error propagation can work correctly\n\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.deps =\n\t\teffect.fn =\n\t\teffect.nodes_start =\n\t\teffect.nodes_end =\n\t\teffect.ac =\n\t\t\tnull;\n}\n\n/**\n *\n * @param {TemplateNode | null} node\n * @param {TemplateNode} end\n */\nexport function remove_effect_dom(node, end) {\n\twhile (node !== null) {\n\t\t/** @type {TemplateNode | null} */\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n\n\t\tnode.remove();\n\t\tnode = next;\n\t}\n}\n\n/**\n * Detach an effect from the effect tree, freeing up memory and\n * reducing the amount of work that happens on subsequent traversals\n * @param {Effect} effect\n */\nexport function unlink_effect(effect) {\n\tvar parent = effect.parent;\n\tvar prev = effect.prev;\n\tvar next = effect.next;\n\n\tif (prev !== null) prev.next = next;\n\tif (next !== null) next.prev = prev;\n\n\tif (parent !== null) {\n\t\tif (parent.first === effect) parent.first = next;\n\t\tif (parent.last === effect) parent.last = prev;\n\t}\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {Effect} effect\n * @param {() => void} [callback]\n */\nexport function pause_effect(effect, callback) {\n\t/** @type {TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\trun_out_transitions(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tif (callback) callback();\n\t});\n}\n\n/**\n * @param {TransitionManager[]} transitions\n * @param {() => void} fn\n */\nexport function run_out_transitions(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {TransitionManager[]} transitions\n * @param {boolean} local\n */\nexport function pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// If a dependency of this effect changed while it was paused,\n\t// schedule the effect to update. we don't use `is_dirty`\n\t// here because we don't want to eagerly recompute a derived like\n\t// `{#if foo}{foo.bar()}{/if}` if `foo` is now `undefined\n\tif ((effect.f & CLEAN) === 0) {\n\t\tset_signal_status(effect, DIRTY);\n\t\tschedule_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function aborted(effect = /** @type {Effect} */ (active_effect)) {\n\treturn (effect.f & DESTROYED) !== 0;\n}\n","/** @import { Derived, Effect, Reaction, Signal, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport { get_descriptors, get_prototype_of, index_of } from '../shared/utils.js';\nimport {\n\tdestroy_block_effect_children,\n\tdestroy_effect_children,\n\texecute_effect_teardown\n} from './reactivity/effects.js';\nimport {\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tDISCONNECTED,\n\tREACTION_IS_UPDATING,\n\tSTALE_REACTION,\n\tERROR_VALUE\n} from './constants.js';\nimport { old_values } from './reactivity/sources.js';\nimport {\n\tdestroy_derived_effects,\n\texecute_derived,\n\tcurrent_async_effect,\n\trecent_async_deriveds,\n\tupdate_derived\n} from './reactivity/deriveds.js';\nimport { async_mode_flag, tracing_mode_flag } from '../flags/index.js';\nimport { tracing_expressions, get_stack } from './dev/tracing.js';\nimport {\n\tcomponent_context,\n\tdev_current_component_function,\n\tdev_stack,\n\tis_runes,\n\tset_component_context,\n\tset_dev_current_component_function,\n\tset_dev_stack\n} from './context.js';\nimport * as w from './warnings.js';\nimport { Batch, batch_deriveds, flushSync, schedule_effect } from './reactivity/batch.js';\nimport { handle_error } from './error-handling.js';\nimport { UNINITIALIZED } from '../../constants.js';\nimport { captured_signals } from './legacy.js';\nimport { without_reactive_context } from './dom/elements/bindings/shared.js';\n\nexport let is_updating_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_updating_effect(value) {\n\tis_updating_effect = value;\n}\n\nexport let is_destroying_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_destroying_effect(value) {\n\tis_destroying_effect = value;\n}\n\n/** @type {null | Reaction} */\nexport let active_reaction = null;\n\nexport let untracking = false;\n\n/** @param {null | Reaction} reaction */\nexport function set_active_reaction(reaction) {\n\tactive_reaction = reaction;\n}\n\n/** @type {null | Effect} */\nexport let active_effect = null;\n\n/** @param {null | Effect} effect */\nexport function set_active_effect(effect) {\n\tactive_effect = effect;\n}\n\n/**\n * When sources are created within a reaction, reading and writing\n * them within that reaction should not cause a re-run\n * @type {null | Source[]}\n */\nexport let current_sources = null;\n\n/** @param {Value} value */\nexport function push_reaction_value(value) {\n\tif (active_reaction !== null && (!async_mode_flag || (active_reaction.f & DERIVED) !== 0)) {\n\t\tif (current_sources === null) {\n\t\t\tcurrent_sources = [value];\n\t\t} else {\n\t\t\tcurrent_sources.push(value);\n\t\t}\n\t}\n}\n\n/**\n * The dependencies of the reaction that is currently being executed. In many cases,\n * the dependencies are unchanged between runs, and so this will be `null` unless\n * and until a new dependency is accessed — we track this via `skipped_deps`\n * @type {null | Value[]}\n */\nlet new_deps = null;\n\nlet skipped_deps = 0;\n\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | Source[]}\n */\nexport let untracked_writes = null;\n\n/** @param {null | Source[]} value */\nexport function set_untracked_writes(value) {\n\tuntracked_writes = value;\n}\n\n/**\n * @type {number} Used by sources and deriveds for handling updates.\n * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing\n **/\nexport let write_version = 1;\n\n/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */\nlet read_version = 0;\n\nexport let update_version = read_version;\n\n/** @param {number} value */\nexport function set_update_version(value) {\n\tupdate_version = value;\n}\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let skip_reaction = false;\n\nexport function increment_write_version() {\n\treturn ++write_version;\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {Reaction} reaction\n * @returns {boolean}\n */\nexport function is_dirty(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar i;\n\t\t\tvar dependency;\n\t\t\tvar is_disconnected = (flags & DISCONNECTED) !== 0;\n\t\t\tvar is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\n\t\t\tvar length = dependencies.length;\n\n\t\t\t// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)\n\t\t\t// then we need to re-connect the reaction to the dependency, unless the effect has already been destroyed\n\t\t\t// (which can happen if the derived is read by an async derived)\n\t\t\tif (\n\t\t\t\t(is_disconnected || is_unowned_connected) &&\n\t\t\t\t(active_effect === null || (active_effect.f & DESTROYED) === 0)\n\t\t\t) {\n\t\t\t\tvar derived = /** @type {Derived} */ (reaction);\n\t\t\t\tvar parent = derived.parent;\n\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\t\t// We always re-add all reactions (even duplicates) if the derived was\n\t\t\t\t\t// previously disconnected, however we don't if it was unowned as we\n\t\t\t\t\t// de-duplicate dependencies in that case\n\t\t\t\t\tif (is_disconnected || !dependency?.reactions?.includes(derived)) {\n\t\t\t\t\t\t(dependency.reactions ??= []).push(derived);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (is_disconnected) {\n\t\t\t\t\tderived.f ^= DISCONNECTED;\n\t\t\t\t}\n\t\t\t\t// If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent\n\t\t\t\t// and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned\n\t\t\t\t// flag\n\t\t\t\tif (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t\t\tderived.f ^= UNOWNED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\tif (is_dirty(/** @type {Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {Derived} */ (dependency));\n\t\t\t\t}\n\n\t\t\t\tif (dependency.wv > reaction.wv) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unowned signals should never be marked as clean unless they\n\t\t// are used within an active_effect without skip_reaction\n\t\tif (!is_unowned || (active_effect !== null && !skip_reaction)) {\n\t\t\tset_signal_status(reaction, CLEAN);\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {Value} signal\n * @param {Effect} effect\n * @param {boolean} [root]\n */\nfunction schedule_possible_effect_self_invalidation(signal, effect, root = true) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tif (!async_mode_flag && current_sources?.includes(signal)) {\n\t\treturn;\n\t}\n\n\tfor (var i = 0; i < reactions.length; i++) {\n\t\tvar reaction = reactions[i];\n\n\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\tschedule_possible_effect_self_invalidation(/** @type {Derived} */ (reaction), effect, false);\n\t\t} else if (effect === reaction) {\n\t\t\tif (root) {\n\t\t\t\tset_signal_status(reaction, DIRTY);\n\t\t\t} else if ((reaction.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(reaction, MAYBE_DIRTY);\n\t\t\t}\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t}\n\t}\n}\n\n/** @param {Reaction} reaction */\nexport function update_reaction(reaction) {\n\tvar previous_deps = new_deps;\n\tvar previous_skipped_deps = skipped_deps;\n\tvar previous_untracked_writes = untracked_writes;\n\tvar previous_reaction = active_reaction;\n\tvar previous_skip_reaction = skip_reaction;\n\tvar previous_sources = current_sources;\n\tvar previous_component_context = component_context;\n\tvar previous_untracking = untracking;\n\tvar previous_update_version = update_version;\n\n\tvar flags = reaction.f;\n\n\tnew_deps = /** @type {null | Value[]} */ (null);\n\tskipped_deps = 0;\n\tuntracked_writes = null;\n\tskip_reaction =\n\t\t(flags & UNOWNED) !== 0 && (untracking || !is_updating_effect || active_reaction === null);\n\tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n\n\tcurrent_sources = null;\n\tset_component_context(reaction.ctx);\n\tuntracking = false;\n\tupdate_version = ++read_version;\n\n\tif (reaction.ac !== null) {\n\t\twithout_reactive_context(() => {\n\t\t\t/** @type {AbortController} */ (reaction.ac).abort(STALE_REACTION);\n\t\t});\n\n\t\treaction.ac = null;\n\t}\n\n\ttry {\n\t\treaction.f |= REACTION_IS_UPDATING;\n\t\tvar fn = /** @type {Function} */ (reaction.fn);\n\t\tvar result = fn();\n\t\tvar deps = reaction.deps;\n\n\t\tif (new_deps !== null) {\n\t\t\tvar i;\n\n\t\t\tremove_reactions(reaction, skipped_deps);\n\n\t\t\tif (deps !== null && skipped_deps > 0) {\n\t\t\t\tdeps.length = skipped_deps + new_deps.length;\n\t\t\t\tfor (i = 0; i < new_deps.length; i++) {\n\t\t\t\t\tdeps[skipped_deps + i] = new_deps[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treaction.deps = deps = new_deps;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!skip_reaction ||\n\t\t\t\t// Deriveds that already have reactions can cleanup, so we still add them as reactions\n\t\t\t\t((flags & DERIVED) !== 0 &&\n\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction).reactions !== null)\n\t\t\t) {\n\t\t\t\tfor (i = skipped_deps; i < deps.length; i++) {\n\t\t\t\t\t(deps[i].reactions ??= []).push(reaction);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (deps !== null && skipped_deps < deps.length) {\n\t\t\tremove_reactions(reaction, skipped_deps);\n\t\t\tdeps.length = skipped_deps;\n\t\t}\n\n\t\t// If we're inside an effect and we have untracked writes, then we need to\n\t\t// ensure that if any of those untracked writes result in re-invalidation\n\t\t// of the current effect, then that happens accordingly\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tuntracked_writes !== null &&\n\t\t\t!untracking &&\n\t\t\tdeps !== null &&\n\t\t\t(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0\n\t\t) {\n\t\t\tfor (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {\n\t\t\t\tschedule_possible_effect_self_invalidation(\n\t\t\t\t\tuntracked_writes[i],\n\t\t\t\t\t/** @type {Effect} */ (reaction)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// If we are returning to an previous reaction then\n\t\t// we need to increment the read version to ensure that\n\t\t// any dependencies in this reaction aren't marked with\n\t\t// the same version\n\t\tif (previous_reaction !== null && previous_reaction !== reaction) {\n\t\t\tread_version++;\n\n\t\t\tif (untracked_writes !== null) {\n\t\t\t\tif (previous_untracked_writes === null) {\n\t\t\t\t\tprevious_untracked_writes = untracked_writes;\n\t\t\t\t} else {\n\t\t\t\t\tprevious_untracked_writes.push(.../** @type {Source[]} */ (untracked_writes));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((reaction.f & ERROR_VALUE) !== 0) {\n\t\t\treaction.f ^= ERROR_VALUE;\n\t\t}\n\n\t\treturn result;\n\t} catch (error) {\n\t\treturn handle_error(error);\n\t} finally {\n\t\treaction.f ^= REACTION_IS_UPDATING;\n\t\tnew_deps = previous_deps;\n\t\tskipped_deps = previous_skipped_deps;\n\t\tuntracked_writes = previous_untracked_writes;\n\t\tactive_reaction = previous_reaction;\n\t\tskip_reaction = previous_skip_reaction;\n\t\tcurrent_sources = previous_sources;\n\t\tset_component_context(previous_component_context);\n\t\tuntracking = previous_untracking;\n\t\tupdate_version = previous_update_version;\n\t}\n}\n\n/**\n * @template V\n * @param {Reaction} signal\n * @param {Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tlet reactions = dependency.reactions;\n\tif (reactions !== null) {\n\t\tvar index = index_of.call(reactions, signal);\n\t\tif (index !== -1) {\n\t\t\tvar new_length = reactions.length - 1;\n\t\t\tif (new_length === 0) {\n\t\t\t\treactions = dependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[new_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the derived has no reactions, then we can disconnect it from the graph,\n\t// allowing it to either reconnect in the future, or be GC'd by the VM.\n\tif (\n\t\treactions === null &&\n\t\t(dependency.f & DERIVED) !== 0 &&\n\t\t// Destroying a child effect while updating a parent effect can cause a dependency to appear\n\t\t// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\n\t\t// allows us to skip the expensive work of disconnecting and immediately reconnecting it\n\t\t(new_deps === null || !new_deps.includes(dependency))\n\t) {\n\t\tset_signal_status(dependency, MAYBE_DIRTY);\n\t\t// If we are working with a derived that is owned by an effect, then mark it as being\n\t\t// disconnected.\n\t\tif ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\n\t\t\tdependency.f ^= DISCONNECTED;\n\t\t}\n\t\t// Disconnect any reactions owned by this reaction\n\t\tdestroy_derived_effects(/** @type {Derived} **/ (dependency));\n\t\tremove_reactions(/** @type {Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tvar dependencies = signal.deps;\n\tif (dependencies === null) return;\n\n\tfor (var i = start_index; i < dependencies.length; i++) {\n\t\tremove_reaction(signal, dependencies[i]);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @returns {void}\n */\nexport function update_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar previous_effect = active_effect;\n\tvar was_updating_effect = is_updating_effect;\n\n\tactive_effect = effect;\n\tis_updating_effect = true;\n\n\tif (DEV) {\n\t\tvar previous_component_fn = dev_current_component_function;\n\t\tset_dev_current_component_function(effect.component_function);\n\t\tvar previous_stack = /** @type {any} */ (dev_stack);\n\t\t// only block effects have a dev stack, keep the current one otherwise\n\t\tset_dev_stack(effect.dev_stack ?? dev_stack);\n\t}\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) !== 0) {\n\t\t\tdestroy_block_effect_children(effect);\n\t\t} else {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\n\t\texecute_effect_teardown(effect);\n\t\tvar teardown = update_reaction(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t\teffect.wv = write_version;\n\n\t\t// In DEV, increment versions of any sources that were written to during the effect,\n\t\t// so that they are correctly marked as dirty when the effect re-runs\n\t\tif (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && effect.deps !== null) {\n\t\t\tfor (var dep of effect.deps) {\n\t\t\t\tif (dep.set_during_effect) {\n\t\t\t\t\tdep.wv = increment_write_version();\n\t\t\t\t\tdep.set_during_effect = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tis_updating_effect = was_updating_effect;\n\t\tactive_effect = previous_effect;\n\n\t\tif (DEV) {\n\t\t\tset_dev_current_component_function(previous_component_fn);\n\t\t\tset_dev_stack(previous_stack);\n\t\t}\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tif (async_mode_flag) {\n\t\treturn new Promise((f) => {\n\t\t\t// Race them against each other - in almost all cases requestAnimationFrame will fire first,\n\t\t\t// but e.g. in case the window is not focused or a view transition happens, requestAnimationFrame\n\t\t\t// will be delayed and setTimeout helps us resolve fast enough in that case\n\t\t\trequestAnimationFrame(() => f());\n\t\t\tsetTimeout(() => f());\n\t\t});\n\t}\n\n\tawait Promise.resolve();\n\n\t// By calling flushSync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflushSync();\n}\n\n/**\n * Returns a promise that resolves once any state changes, and asynchronous work resulting from them,\n * have resolved and the DOM has been updated\n * @returns {Promise<void>}\n * @since 5.36\n */\nexport function settled() {\n\treturn Batch.ensure().settled();\n}\n\n/**\n * @template V\n * @param {Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\tvar flags = signal.f;\n\tvar is_derived = (flags & DERIVED) !== 0;\n\n\tcaptured_signals?.add(signal);\n\n\t// Register the dependency on the current reaction signal.\n\tif (active_reaction !== null && !untracking) {\n\t\t// if we're in a derived that is being read inside an _async_ derived,\n\t\t// it's possible that the effect was already destroyed. In this case,\n\t\t// we don't add the dependency, because that would create a memory leak\n\t\tvar destroyed = active_effect !== null && (active_effect.f & DESTROYED) !== 0;\n\n\t\tif (!destroyed && !current_sources?.includes(signal)) {\n\t\t\tvar deps = active_reaction.deps;\n\n\t\t\tif ((active_reaction.f & REACTION_IS_UPDATING) !== 0) {\n\t\t\t\t// we're in the effect init/update cycle\n\t\t\t\tif (signal.rv < read_version) {\n\t\t\t\t\tsignal.rv = read_version;\n\n\t\t\t\t\t// If the signal is accessing the same dependencies in the same\n\t\t\t\t\t// order as it did last time, increment `skipped_deps`\n\t\t\t\t\t// rather than updating `new_deps`, which creates GC cost\n\t\t\t\t\tif (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\n\t\t\t\t\t\tskipped_deps++;\n\t\t\t\t\t} else if (new_deps === null) {\n\t\t\t\t\t\tnew_deps = [signal];\n\t\t\t\t\t} else if (!skip_reaction || !new_deps.includes(signal)) {\n\t\t\t\t\t\t// Normally we can push duplicated dependencies to `new_deps`, but if we're inside\n\t\t\t\t\t\t// an unowned derived because skip_reaction is true, then we need to ensure that\n\t\t\t\t\t\t// we don't have duplicates\n\t\t\t\t\t\tnew_deps.push(signal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// we're adding a dependency outside the init/update cycle\n\t\t\t\t// (i.e. after an `await`)\n\t\t\t\t(active_reaction.deps ??= []).push(signal);\n\n\t\t\t\tvar reactions = signal.reactions;\n\n\t\t\t\tif (reactions === null) {\n\t\t\t\t\tsignal.reactions = [active_reaction];\n\t\t\t\t} else if (!reactions.includes(active_reaction)) {\n\t\t\t\t\treactions.push(active_reaction);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (\n\t\tis_derived &&\n\t\t/** @type {Derived} */ (signal).deps === null &&\n\t\t/** @type {Derived} */ (signal).effects === null\n\t) {\n\t\tvar derived = /** @type {Derived} */ (signal);\n\t\tvar parent = derived.parent;\n\n\t\tif (parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t// If the derived is owned by another derived then mark it as unowned\n\t\t\t// as the derived value might have been referenced in a different context\n\t\t\t// since and thus its parent might not be its true owner anymore\n\t\t\tderived.f ^= UNOWNED;\n\t\t}\n\t}\n\n\tif (DEV) {\n\t\tif (current_async_effect) {\n\t\t\tvar tracking = (current_async_effect.f & REACTION_IS_UPDATING) !== 0;\n\t\t\tvar was_read = current_async_effect.deps?.includes(signal);\n\n\t\t\tif (!tracking && !untracking && !was_read) {\n\t\t\t\tw.await_reactivity_loss(/** @type {string} */ (signal.label));\n\n\t\t\t\tvar trace = get_stack('TracedAt');\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tif (trace) console.warn(trace);\n\t\t\t}\n\t\t}\n\n\t\trecent_async_deriveds.delete(signal);\n\n\t\tif (\n\t\t\ttracing_mode_flag &&\n\t\t\t!untracking &&\n\t\t\ttracing_expressions !== null &&\n\t\t\tactive_reaction !== null &&\n\t\t\ttracing_expressions.reaction === active_reaction\n\t\t) {\n\t\t\t// Used when mapping state between special blocks like `each`\n\t\t\tif (signal.trace) {\n\t\t\t\tsignal.trace();\n\t\t\t} else {\n\t\t\t\ttrace = get_stack('TracedAt');\n\n\t\t\t\tif (trace) {\n\t\t\t\t\tvar entry = tracing_expressions.entries.get(signal);\n\n\t\t\t\t\tif (entry === undefined) {\n\t\t\t\t\t\tentry = { traces: [] };\n\t\t\t\t\t\ttracing_expressions.entries.set(signal, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar last = entry.traces[entry.traces.length - 1];\n\n\t\t\t\t\t// traces can be duplicated, e.g. by `snapshot` invoking both\n\t\t\t\t\t// both `getOwnPropertyDescriptor` and `get` traps at once\n\t\t\t\t\tif (trace.stack !== last?.stack) {\n\t\t\t\t\t\tentry.traces.push(trace);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (is_destroying_effect) {\n\t\tif (old_values.has(signal)) {\n\t\t\treturn old_values.get(signal);\n\t\t}\n\n\t\tif (is_derived) {\n\t\t\tderived = /** @type {Derived} */ (signal);\n\n\t\t\tvar value = derived.v;\n\n\t\t\t// if the derived is dirty and has reactions, or depends on the values that just changed, re-execute\n\t\t\t// (a derived can be maybe_dirty due to the effect destroy removing its last reaction)\n\t\t\tif (\n\t\t\t\t((derived.f & CLEAN) === 0 && derived.reactions !== null) ||\n\t\t\t\tdepends_on_old_values(derived)\n\t\t\t) {\n\t\t\t\tvalue = execute_derived(derived);\n\t\t\t}\n\n\t\t\told_values.set(derived, value);\n\n\t\t\treturn value;\n\t\t}\n\t} else if (is_derived) {\n\t\tderived = /** @type {Derived} */ (signal);\n\n\t\tif (batch_deriveds?.has(derived)) {\n\t\t\treturn batch_deriveds.get(derived);\n\t\t}\n\n\t\tif (is_dirty(derived)) {\n\t\t\tupdate_derived(derived);\n\t\t}\n\t}\n\n\tif ((signal.f & ERROR_VALUE) !== 0) {\n\t\tthrow signal.v;\n\t}\n\n\treturn signal.v;\n}\n\n/** @param {Derived} derived */\nfunction depends_on_old_values(derived) {\n\tif (derived.v === UNINITIALIZED) return true; // we don't know, so assume the worst\n\tif (derived.deps === null) return false;\n\n\tfor (const dep of derived.deps) {\n\t\tif (old_values.has(dep)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((dep.f & DERIVED) !== 0 && depends_on_old_values(/** @type {Derived} */ (dep))) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared\n * @template V\n * @param {Value<V> | undefined} signal\n * @returns {V | undefined}\n */\nexport function safe_get(signal) {\n\treturn signal && get(signal);\n}\n\n/**\n * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),\n * any state read inside `fn` will not be treated as a dependency.\n *\n * ```ts\n * $effect(() => {\n *   // this will run when `data` changes, but not when `time` changes\n *   save(data, {\n *     timestamp: untrack(() => time)\n *   });\n * });\n * ```\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tvar previous_untracking = untracking;\n\ttry {\n\t\tuntracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tuntracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\t/** @type {Record<string, unknown>} */\n\tvar result = {};\n\n\tfor (var key in obj) {\n\t\tif (!keys.includes(key)) {\n\t\t\tresult[key] = obj[key];\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\t// When working with a possible SvelteDate, this\n\t\t// will ensure we capture changes to it.\n\t\tif (value instanceof Date) {\n\t\t\tvalue.getTime();\n\t\t}\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = get_prototype_of(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","const regex_return_characters = /\\r/g;\n\n/**\n * @param {string} str\n * @returns {string}\n */\nexport function hash(str) {\n\tstr = str.replace(regex_return_characters, '');\n\tlet hash = 5381;\n\tlet i = str.length;\n\n\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n\treturn (hash >>> 0).toString(36);\n}\n\nconst VOID_ELEMENT_NAMES = [\n\t'area',\n\t'base',\n\t'br',\n\t'col',\n\t'command',\n\t'embed',\n\t'hr',\n\t'img',\n\t'input',\n\t'keygen',\n\t'link',\n\t'meta',\n\t'param',\n\t'source',\n\t'track',\n\t'wbr'\n];\n\n/**\n * Returns `true` if `name` is of a void element\n * @param {string} name\n */\nexport function is_void(name) {\n\treturn VOID_ELEMENT_NAMES.includes(name) || name.toLowerCase() === '!doctype';\n}\n\nconst RESERVED_WORDS = [\n\t'arguments',\n\t'await',\n\t'break',\n\t'case',\n\t'catch',\n\t'class',\n\t'const',\n\t'continue',\n\t'debugger',\n\t'default',\n\t'delete',\n\t'do',\n\t'else',\n\t'enum',\n\t'eval',\n\t'export',\n\t'extends',\n\t'false',\n\t'finally',\n\t'for',\n\t'function',\n\t'if',\n\t'implements',\n\t'import',\n\t'in',\n\t'instanceof',\n\t'interface',\n\t'let',\n\t'new',\n\t'null',\n\t'package',\n\t'private',\n\t'protected',\n\t'public',\n\t'return',\n\t'static',\n\t'super',\n\t'switch',\n\t'this',\n\t'throw',\n\t'true',\n\t'try',\n\t'typeof',\n\t'var',\n\t'void',\n\t'while',\n\t'with',\n\t'yield'\n];\n\n/**\n * Returns `true` if `word` is a reserved JavaScript keyword\n * @param {string} word\n */\nexport function is_reserved(word) {\n\treturn RESERVED_WORDS.includes(word);\n}\n\n/**\n * @param {string} name\n */\nexport function is_capture_event(name) {\n\treturn name.endsWith('capture') && name !== 'gotpointercapture' && name !== 'lostpointercapture';\n}\n\n/** List of Element events that will be delegated */\nconst DELEGATED_EVENTS = [\n\t'beforeinput',\n\t'click',\n\t'change',\n\t'dblclick',\n\t'contextmenu',\n\t'focusin',\n\t'focusout',\n\t'input',\n\t'keydown',\n\t'keyup',\n\t'mousedown',\n\t'mousemove',\n\t'mouseout',\n\t'mouseover',\n\t'mouseup',\n\t'pointerdown',\n\t'pointermove',\n\t'pointerout',\n\t'pointerover',\n\t'pointerup',\n\t'touchend',\n\t'touchmove',\n\t'touchstart'\n];\n\n/**\n * Returns `true` if `event_name` is a delegated event\n * @param {string} event_name\n */\nexport function is_delegated(event_name) {\n\treturn DELEGATED_EVENTS.includes(event_name);\n}\n\n/**\n * Attributes that are boolean, i.e. they are present or not present.\n */\nconst DOM_BOOLEAN_ATTRIBUTES = [\n\t'allowfullscreen',\n\t'async',\n\t'autofocus',\n\t'autoplay',\n\t'checked',\n\t'controls',\n\t'default',\n\t'disabled',\n\t'formnovalidate',\n\t'indeterminate',\n\t'inert',\n\t'ismap',\n\t'loop',\n\t'multiple',\n\t'muted',\n\t'nomodule',\n\t'novalidate',\n\t'open',\n\t'playsinline',\n\t'readonly',\n\t'required',\n\t'reversed',\n\t'seamless',\n\t'selected',\n\t'webkitdirectory',\n\t'defer',\n\t'disablepictureinpicture',\n\t'disableremoteplayback'\n];\n\n/**\n * Returns `true` if `name` is a boolean attribute\n * @param {string} name\n */\nexport function is_boolean_attribute(name) {\n\treturn DOM_BOOLEAN_ATTRIBUTES.includes(name);\n}\n\n/**\n * @type {Record<string, string>}\n * List of attribute names that should be aliased to their property names\n * because they behave differently between setting them as an attribute and\n * setting them as a property.\n */\nconst ATTRIBUTE_ALIASES = {\n\t// no `class: 'className'` because we handle that separately\n\tformnovalidate: 'formNoValidate',\n\tismap: 'isMap',\n\tnomodule: 'noModule',\n\tplaysinline: 'playsInline',\n\treadonly: 'readOnly',\n\tdefaultvalue: 'defaultValue',\n\tdefaultchecked: 'defaultChecked',\n\tsrcobject: 'srcObject',\n\tnovalidate: 'noValidate',\n\tallowfullscreen: 'allowFullscreen',\n\tdisablepictureinpicture: 'disablePictureInPicture',\n\tdisableremoteplayback: 'disableRemotePlayback'\n};\n\n/**\n * @param {string} name\n */\nexport function normalize_attribute(name) {\n\tname = name.toLowerCase();\n\treturn ATTRIBUTE_ALIASES[name] ?? name;\n}\n\nconst DOM_PROPERTIES = [\n\t...DOM_BOOLEAN_ATTRIBUTES,\n\t'formNoValidate',\n\t'isMap',\n\t'noModule',\n\t'playsInline',\n\t'readOnly',\n\t'value',\n\t'volume',\n\t'defaultValue',\n\t'defaultChecked',\n\t'srcObject',\n\t'noValidate',\n\t'allowFullscreen',\n\t'disablePictureInPicture',\n\t'disableRemotePlayback'\n];\n\n/**\n * @param {string} name\n */\nexport function is_dom_property(name) {\n\treturn DOM_PROPERTIES.includes(name);\n}\n\nconst NON_STATIC_PROPERTIES = ['autofocus', 'muted', 'defaultValue', 'defaultChecked'];\n\n/**\n * Returns `true` if the given attribute cannot be set through the template\n * string, i.e. needs some kind of JavaScript handling to work.\n * @param {string} name\n */\nexport function cannot_be_set_statically(name) {\n\treturn NON_STATIC_PROPERTIES.includes(name);\n}\n\n/**\n * Subset of delegated events which should be passive by default.\n * These two are already passive via browser defaults on window, document and body.\n * But since\n * - we're delegating them\n * - they happen often\n * - they apply to mobile which is generally less performant\n * we're marking them as passive by default for other elements, too.\n */\nconst PASSIVE_EVENTS = ['touchstart', 'touchmove'];\n\n/**\n * Returns `true` if `name` is a passive event\n * @param {string} name\n */\nexport function is_passive_event(name) {\n\treturn PASSIVE_EVENTS.includes(name);\n}\n\nconst CONTENT_EDITABLE_BINDINGS = ['textContent', 'innerHTML', 'innerText'];\n\n/** @param {string} name */\nexport function is_content_editable_binding(name) {\n\treturn CONTENT_EDITABLE_BINDINGS.includes(name);\n}\n\nconst LOAD_ERROR_ELEMENTS = [\n\t'body',\n\t'embed',\n\t'iframe',\n\t'img',\n\t'link',\n\t'object',\n\t'script',\n\t'style',\n\t'track'\n];\n\n/**\n * Returns `true` if the element emits `load` and `error` events\n * @param {string} name\n */\nexport function is_load_error_element(name) {\n\treturn LOAD_ERROR_ELEMENTS.includes(name);\n}\n\nconst SVG_ELEMENTS = [\n\t'altGlyph',\n\t'altGlyphDef',\n\t'altGlyphItem',\n\t'animate',\n\t'animateColor',\n\t'animateMotion',\n\t'animateTransform',\n\t'circle',\n\t'clipPath',\n\t'color-profile',\n\t'cursor',\n\t'defs',\n\t'desc',\n\t'discard',\n\t'ellipse',\n\t'feBlend',\n\t'feColorMatrix',\n\t'feComponentTransfer',\n\t'feComposite',\n\t'feConvolveMatrix',\n\t'feDiffuseLighting',\n\t'feDisplacementMap',\n\t'feDistantLight',\n\t'feDropShadow',\n\t'feFlood',\n\t'feFuncA',\n\t'feFuncB',\n\t'feFuncG',\n\t'feFuncR',\n\t'feGaussianBlur',\n\t'feImage',\n\t'feMerge',\n\t'feMergeNode',\n\t'feMorphology',\n\t'feOffset',\n\t'fePointLight',\n\t'feSpecularLighting',\n\t'feSpotLight',\n\t'feTile',\n\t'feTurbulence',\n\t'filter',\n\t'font',\n\t'font-face',\n\t'font-face-format',\n\t'font-face-name',\n\t'font-face-src',\n\t'font-face-uri',\n\t'foreignObject',\n\t'g',\n\t'glyph',\n\t'glyphRef',\n\t'hatch',\n\t'hatchpath',\n\t'hkern',\n\t'image',\n\t'line',\n\t'linearGradient',\n\t'marker',\n\t'mask',\n\t'mesh',\n\t'meshgradient',\n\t'meshpatch',\n\t'meshrow',\n\t'metadata',\n\t'missing-glyph',\n\t'mpath',\n\t'path',\n\t'pattern',\n\t'polygon',\n\t'polyline',\n\t'radialGradient',\n\t'rect',\n\t'set',\n\t'solidcolor',\n\t'stop',\n\t'svg',\n\t'switch',\n\t'symbol',\n\t'text',\n\t'textPath',\n\t'tref',\n\t'tspan',\n\t'unknown',\n\t'use',\n\t'view',\n\t'vkern'\n];\n\n/** @param {string} name */\nexport function is_svg(name) {\n\treturn SVG_ELEMENTS.includes(name);\n}\n\nconst MATHML_ELEMENTS = [\n\t'annotation',\n\t'annotation-xml',\n\t'maction',\n\t'math',\n\t'merror',\n\t'mfrac',\n\t'mi',\n\t'mmultiscripts',\n\t'mn',\n\t'mo',\n\t'mover',\n\t'mpadded',\n\t'mphantom',\n\t'mprescripts',\n\t'mroot',\n\t'mrow',\n\t'ms',\n\t'mspace',\n\t'msqrt',\n\t'mstyle',\n\t'msub',\n\t'msubsup',\n\t'msup',\n\t'mtable',\n\t'mtd',\n\t'mtext',\n\t'mtr',\n\t'munder',\n\t'munderover',\n\t'semantics'\n];\n\n/** @param {string} name */\nexport function is_mathml(name) {\n\treturn MATHML_ELEMENTS.includes(name);\n}\n\nconst STATE_CREATION_RUNES = /** @type {const} */ ([\n\t'$state',\n\t'$state.raw',\n\t'$derived',\n\t'$derived.by'\n]);\n\nconst RUNES = /** @type {const} */ ([\n\t...STATE_CREATION_RUNES,\n\t'$state.snapshot',\n\t'$props',\n\t'$props.id',\n\t'$bindable',\n\t'$effect',\n\t'$effect.pre',\n\t'$effect.tracking',\n\t'$effect.root',\n\t'$effect.pending',\n\t'$inspect',\n\t'$inspect().with',\n\t'$inspect.trace',\n\t'$host'\n]);\n\n/** @typedef {typeof RUNES[number]} RuneName */\n\n/**\n * @param {string} name\n * @returns {name is RuneName}\n */\nexport function is_rune(name) {\n\treturn RUNES.includes(/** @type {RuneName} */ (name));\n}\n\n/** @typedef {typeof STATE_CREATION_RUNES[number]} StateCreationRuneName */\n\n/**\n * @param {string} name\n * @returns {name is StateCreationRuneName}\n */\nexport function is_state_creation_rune(name) {\n\treturn STATE_CREATION_RUNES.includes(/** @type {StateCreationRuneName} */ (name));\n}\n\n/** List of elements that require raw contents and should not have SSR comments put in them */\nconst RAW_TEXT_ELEMENTS = /** @type {const} */ (['textarea', 'script', 'style', 'title']);\n\n/** @param {string} name */\nexport function is_raw_text_element(name) {\n\treturn RAW_TEXT_ELEMENTS.includes(/** @type {typeof RAW_TEXT_ELEMENTS[number]} */ (name));\n}\n\n/**\n * Prevent devtools trying to make `location` a clickable link by inserting a zero-width space\n * @template {string | undefined} T\n * @param {T} location\n * @returns {T};\n */\nexport function sanitize_location(location) {\n\treturn /** @type {T} */ (location?.replace(/\\//g, '/\\u200b'));\n}\n","import { teardown } from '../../reactivity/effects.js';\nimport { define_property, is_array } from '../../../shared/utils.js';\nimport { hydrating } from '../hydration.js';\nimport { queue_micro_task } from '../task.js';\nimport { FILENAME } from '../../../../constants.js';\nimport * as w from '../../warnings.js';\nimport {\n\tactive_effect,\n\tactive_reaction,\n\tset_active_effect,\n\tset_active_reaction\n} from '../../runtime.js';\nimport { without_reactive_context } from './bindings/shared.js';\n\n/** @type {Set<string>} */\nexport const all_registered_events = new Set();\n\n/** @type {Set<(events: Array<string>) => void>} */\nexport const root_event_handles = new Set();\n\n/**\n * SSR adds onload and onerror attributes to catch those events before the hydration.\n * This function detects those cases, removes the attributes and replays the events.\n * @param {HTMLElement} dom\n */\nexport function replay_events(dom) {\n\tif (!hydrating) return;\n\n\tdom.removeAttribute('onload');\n\tdom.removeAttribute('onerror');\n\t// @ts-expect-error\n\tconst event = dom.__e;\n\tif (event !== undefined) {\n\t\t// @ts-expect-error\n\t\tdom.__e = undefined;\n\t\tqueueMicrotask(() => {\n\t\t\tif (dom.isConnected) {\n\t\t\t\tdom.dispatchEvent(event);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * @param {string} event_name\n * @param {EventTarget} dom\n * @param {EventListener} [handler]\n * @param {AddEventListenerOptions} [options]\n */\nexport function create_event(event_name, dom, handler, options = {}) {\n\t/**\n\t * @this {EventTarget}\n\t */\n\tfunction target_handler(/** @type {Event} */ event) {\n\t\tif (!options.capture) {\n\t\t\t// Only call in the bubble phase, else delegated events would be called before the capturing events\n\t\t\thandle_event_propagation.call(dom, event);\n\t\t}\n\t\tif (!event.cancelBubble) {\n\t\t\treturn without_reactive_context(() => {\n\t\t\t\treturn handler?.call(this, event);\n\t\t\t});\n\t\t}\n\t}\n\n\t// Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned\n\t// with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we\n\t// defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes\n\t// this bug. The same applies to wheel events and touch events.\n\tif (\n\t\tevent_name.startsWith('pointer') ||\n\t\tevent_name.startsWith('touch') ||\n\t\tevent_name === 'wheel'\n\t) {\n\t\tqueue_micro_task(() => {\n\t\t\tdom.addEventListener(event_name, target_handler, options);\n\t\t});\n\t} else {\n\t\tdom.addEventListener(event_name, target_handler, options);\n\t}\n\n\treturn target_handler;\n}\n\n/**\n * Attaches an event handler to an element and returns a function that removes the handler. Using this\n * rather than `addEventListener` will preserve the correct order relative to handlers added declaratively\n * (with attributes like `onclick`), which use event delegation for performance reasons\n *\n * @param {EventTarget} element\n * @param {string} type\n * @param {EventListener} handler\n * @param {AddEventListenerOptions} [options]\n */\nexport function on(element, type, handler, options = {}) {\n\tvar target_handler = create_event(type, element, handler, options);\n\n\treturn () => {\n\t\telement.removeEventListener(type, target_handler, options);\n\t};\n}\n\n/**\n * @param {string} event_name\n * @param {Element} dom\n * @param {EventListener} [handler]\n * @param {boolean} [capture]\n * @param {boolean} [passive]\n * @returns {void}\n */\nexport function event(event_name, dom, handler, capture, passive) {\n\tvar options = { capture, passive };\n\tvar target_handler = create_event(event_name, dom, handler, options);\n\n\tif (\n\t\tdom === document.body ||\n\t\t// @ts-ignore\n\t\tdom === window ||\n\t\t// @ts-ignore\n\t\tdom === document ||\n\t\t// Firefox has quirky behavior, it can happen that we still get \"canplay\" events when the element is already removed\n\t\tdom instanceof HTMLMediaElement\n\t) {\n\t\tteardown(() => {\n\t\t\tdom.removeEventListener(event_name, target_handler, options);\n\t\t});\n\t}\n}\n\n/**\n * @param {Array<string>} events\n * @returns {void}\n */\nexport function delegate(events) {\n\tfor (var i = 0; i < events.length; i++) {\n\t\tall_registered_events.add(events[i]);\n\t}\n\n\tfor (var fn of root_event_handles) {\n\t\tfn(events);\n\t}\n}\n\n// used to store the reference to the currently propagated event\n// to prevent garbage collection between microtasks in Firefox\n// If the event object is GCed too early, the expando __root property\n// set on the event object is lost, causing the event delegation\n// to process the event twice\nlet last_propagated_event = null;\n\n/**\n * @this {EventTarget}\n * @param {Event} event\n * @returns {void}\n */\nexport function handle_event_propagation(event) {\n\tvar handler_element = this;\n\tvar owner_document = /** @type {Node} */ (handler_element).ownerDocument;\n\tvar event_name = event.type;\n\tvar path = event.composedPath?.() || [];\n\tvar current_target = /** @type {null | Element} */ (path[0] || event.target);\n\n\tlast_propagated_event = event;\n\n\t// composedPath contains list of nodes the event has propagated through.\n\t// We check __root to skip all nodes below it in case this is a\n\t// parent of the __root node, which indicates that there's nested\n\t// mounted apps. In this case we don't want to trigger events multiple times.\n\tvar path_idx = 0;\n\n\t// the `last_propagated_event === event` check is redundant, but\n\t// without it the variable will be DCE'd and things will\n\t// fail mysteriously in Firefox\n\t// @ts-expect-error is added below\n\tvar handled_at = last_propagated_event === event && event.__root;\n\n\tif (handled_at) {\n\t\tvar at_idx = path.indexOf(handled_at);\n\t\tif (\n\t\t\tat_idx !== -1 &&\n\t\t\t(handler_element === document || handler_element === /** @type {any} */ (window))\n\t\t) {\n\t\t\t// This is the fallback document listener or a window listener, but the event was already handled\n\t\t\t// -> ignore, but set handle_at to document/window so that we're resetting the event\n\t\t\t// chain in case someone manually dispatches the same event object again.\n\t\t\t// @ts-expect-error\n\t\t\tevent.__root = handler_element;\n\t\t\treturn;\n\t\t}\n\n\t\t// We're deliberately not skipping if the index is higher, because\n\t\t// someone could create an event programmatically and emit it multiple times,\n\t\t// in which case we want to handle the whole propagation chain properly each time.\n\t\t// (this will only be a false negative if the event is dispatched multiple times and\n\t\t// the fallback document listener isn't reached in between, but that's super rare)\n\t\tvar handler_idx = path.indexOf(handler_element);\n\t\tif (handler_idx === -1) {\n\t\t\t// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)\n\t\t\t// so guard against that, too, and assume that everything was handled at this point.\n\t\t\treturn;\n\t\t}\n\n\t\tif (at_idx <= handler_idx) {\n\t\t\tpath_idx = at_idx;\n\t\t}\n\t}\n\n\tcurrent_target = /** @type {Element} */ (path[path_idx] || event.target);\n\t// there can only be one delegated event per element, and we either already handled the current target,\n\t// or this is the very first target in the chain which has a non-delegated listener, in which case it's safe\n\t// to handle a possible delegated event on it later (through the root delegation listener for example).\n\tif (current_target === handler_element) return;\n\n\t// Proxy currentTarget to correct target\n\tdefine_property(event, 'currentTarget', {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn current_target || owner_document;\n\t\t}\n\t});\n\n\t// This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,\n\t// where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic\n\t// to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,\n\t// it's probably best that all event handled by Svelte have this behaviour, as we don't really want\n\t// an event handler to run in the context of another reaction or effect.\n\tvar previous_reaction = active_reaction;\n\tvar previous_effect = active_effect;\n\tset_active_reaction(null);\n\tset_active_effect(null);\n\n\ttry {\n\t\t/**\n\t\t * @type {unknown}\n\t\t */\n\t\tvar throw_error;\n\t\t/**\n\t\t * @type {unknown[]}\n\t\t */\n\t\tvar other_errors = [];\n\n\t\twhile (current_target !== null) {\n\t\t\t/** @type {null | Element} */\n\t\t\tvar parent_element =\n\t\t\t\tcurrent_target.assignedSlot ||\n\t\t\t\tcurrent_target.parentNode ||\n\t\t\t\t/** @type {any} */ (current_target).host ||\n\t\t\t\tnull;\n\n\t\t\ttry {\n\t\t\t\t// @ts-expect-error\n\t\t\t\tvar delegated = current_target['__' + event_name];\n\n\t\t\t\tif (\n\t\t\t\t\tdelegated != null &&\n\t\t\t\t\t(!(/** @type {any} */ (current_target).disabled) ||\n\t\t\t\t\t\t// DOM could've been updated already by the time this is reached, so we check this as well\n\t\t\t\t\t\t// -> the target could not have been disabled because it emits the event in the first place\n\t\t\t\t\t\tevent.target === current_target)\n\t\t\t\t) {\n\t\t\t\t\tif (is_array(delegated)) {\n\t\t\t\t\t\tvar [fn, ...data] = delegated;\n\t\t\t\t\t\tfn.apply(current_target, [event, ...data]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelegated.call(current_target, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (throw_error) {\n\t\t\t\t\tother_errors.push(error);\n\t\t\t\t} else {\n\t\t\t\t\tthrow_error = error;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (event.cancelBubble || parent_element === handler_element || parent_element === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent_target = parent_element;\n\t\t}\n\n\t\tif (throw_error) {\n\t\t\tfor (let error of other_errors) {\n\t\t\t\t// Throw the rest of the errors, one-by-one on a microtask\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow throw_error;\n\t\t}\n\t} finally {\n\t\t// @ts-expect-error is used above\n\t\tevent.__root = handler_element;\n\t\t// @ts-ignore remove proxy on currentTarget\n\t\tdelete event.currentTarget;\n\t\tset_active_reaction(previous_reaction);\n\t\tset_active_effect(previous_effect);\n\t}\n}\n\n/**\n * In dev, warn if an event handler is not a function, as it means the\n * user probably called the handler or forgot to add a `() =>`\n * @param {() => (event: Event, ...args: any) => void} thunk\n * @param {EventTarget} element\n * @param {[Event, ...any]} args\n * @param {any} component\n * @param {[number, number]} [loc]\n * @param {boolean} [remove_parens]\n */\nexport function apply(\n\tthunk,\n\telement,\n\targs,\n\tcomponent,\n\tloc,\n\thas_side_effects = false,\n\tremove_parens = false\n) {\n\tlet handler;\n\tlet error;\n\n\ttry {\n\t\thandler = thunk();\n\t} catch (e) {\n\t\terror = e;\n\t}\n\n\tif (typeof handler !== 'function' && (has_side_effects || handler != null || error)) {\n\t\tconst filename = component?.[FILENAME];\n\t\tconst location = loc ? ` at ${filename}:${loc[0]}:${loc[1]}` : ` in ${filename}`;\n\t\tconst phase = args[0]?.eventPhase < Event.BUBBLING_PHASE ? 'capture' : '';\n\t\tconst event_name = args[0]?.type + phase;\n\t\tconst description = `\\`${event_name}\\` handler${location}`;\n\t\tconst suggestion = remove_parens ? 'remove the trailing `()`' : 'add a leading `() =>`';\n\n\t\tw.event_handler_invalid(description, suggestion);\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\thandler?.apply(element, args);\n}\n","/** @import { ComponentContext, Effect, TemplateNode } from '#client' */\n/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */\nimport { DEV } from 'esm-env';\nimport {\n\tclear_text_content,\n\tcreate_text,\n\tget_first_child,\n\tget_next_sibling,\n\tinit_operations\n} from './dom/operations.js';\nimport { HYDRATION_END, HYDRATION_ERROR, HYDRATION_START } from '../../constants.js';\nimport { active_effect } from './runtime.js';\nimport { push, pop, component_context } from './context.js';\nimport { component_root } from './reactivity/effects.js';\nimport {\n\thydrate_next,\n\thydrate_node,\n\thydrating,\n\tset_hydrate_node,\n\tset_hydrating\n} from './dom/hydration.js';\nimport { array_from } from '../shared/utils.js';\nimport {\n\tall_registered_events,\n\thandle_event_propagation,\n\troot_event_handles\n} from './dom/elements/events.js';\nimport { reset_head_anchor } from './dom/blocks/svelte-head.js';\nimport * as w from './warnings.js';\nimport * as e from './errors.js';\nimport { assign_nodes } from './dom/template.js';\nimport { is_passive_event } from '../../utils.js';\nimport { COMMENT_NODE, STATE_SYMBOL } from './constants.js';\nimport { boundary } from './dom/blocks/boundary.js';\n\n/**\n * This is normally true — block effects should run their intro transitions —\n * but is false during hydration (unless `options.intro` is `true`) and\n * when creating the children of a `<svelte:element>` that just changed tag\n */\nexport let should_intro = true;\n\n/** @param {boolean} value */\nexport function set_should_intro(value) {\n\tshould_intro = value;\n}\n\n/**\n * @param {Element} text\n * @param {string} value\n * @returns {void}\n */\nexport function set_text(text, value) {\n\t// For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing\n\tvar str = value == null ? '' : typeof value === 'object' ? value + '' : value;\n\t// @ts-expect-error\n\tif (str !== (text.__t ??= text.nodeValue)) {\n\t\t// @ts-expect-error\n\t\ttext.__t = str;\n\t\ttext.nodeValue = str + '';\n\t}\n}\n\n/**\n * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.\n * Transitions will play during the initial render unless the `intro` option is set to `false`.\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component\n * @param {MountOptions<Props>} options\n * @returns {Exports}\n */\nexport function mount(component, options) {\n\treturn _mount(component, options);\n}\n\n/**\n * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component\n * @param {{} extends Props ? {\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tprops?: Props;\n * \t\tevents?: Record<string, (e: any) => any>;\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t\trecover?: boolean;\n * \t} : {\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tprops: Props;\n * \t\tevents?: Record<string, (e: any) => any>;\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t\trecover?: boolean;\n * \t}} options\n * @returns {Exports}\n */\nexport function hydrate(component, options) {\n\tinit_operations();\n\toptions.intro = options.intro ?? false;\n\tconst target = options.target;\n\tconst was_hydrating = hydrating;\n\tconst previous_hydrate_node = hydrate_node;\n\n\ttry {\n\t\tvar anchor = /** @type {TemplateNode} */ (get_first_child(target));\n\t\twhile (\n\t\t\tanchor &&\n\t\t\t(anchor.nodeType !== COMMENT_NODE || /** @type {Comment} */ (anchor).data !== HYDRATION_START)\n\t\t) {\n\t\t\tanchor = /** @type {TemplateNode} */ (get_next_sibling(anchor));\n\t\t}\n\n\t\tif (!anchor) {\n\t\t\tthrow HYDRATION_ERROR;\n\t\t}\n\n\t\tset_hydrating(true);\n\t\tset_hydrate_node(/** @type {Comment} */ (anchor));\n\n\t\tconst instance = _mount(component, { ...options, anchor });\n\n\t\tset_hydrating(false);\n\n\t\treturn /**  @type {Exports} */ (instance);\n\t} catch (error) {\n\t\t// re-throw Svelte errors - they are certainly not related to hydration\n\t\tif (\n\t\t\terror instanceof Error &&\n\t\t\terror.message.split('\\n').some((line) => line.startsWith('https://svelte.dev/e/'))\n\t\t) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error !== HYDRATION_ERROR) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn('Failed to hydrate: ', error);\n\t\t}\n\n\t\tif (options.recover === false) {\n\t\t\te.hydration_failed();\n\t\t}\n\n\t\t// If an error occurred above, the operations might not yet have been initialised.\n\t\tinit_operations();\n\t\tclear_text_content(target);\n\n\t\tset_hydrating(false);\n\t\treturn mount(component, options);\n\t} finally {\n\t\tset_hydrating(was_hydrating);\n\t\tset_hydrate_node(previous_hydrate_node);\n\t\treset_head_anchor();\n\t}\n}\n\n/** @type {Map<string, number>} */\nconst document_listeners = new Map();\n\n/**\n * @template {Record<string, any>} Exports\n * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component\n * @param {MountOptions} options\n * @returns {Exports}\n */\nfunction _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {\n\tinit_operations();\n\n\t/** @type {Set<string>} */\n\tvar registered_events = new Set();\n\n\t/** @param {Array<string>} events */\n\tvar event_handle = (events) => {\n\t\tfor (var i = 0; i < events.length; i++) {\n\t\t\tvar event_name = events[i];\n\n\t\t\tif (registered_events.has(event_name)) continue;\n\t\t\tregistered_events.add(event_name);\n\n\t\t\tvar passive = is_passive_event(event_name);\n\n\t\t\t// Add the event listener to both the container and the document.\n\t\t\t// The container listener ensures we catch events from within in case\n\t\t\t// the outer content stops propagation of the event.\n\t\t\ttarget.addEventListener(event_name, handle_event_propagation, { passive });\n\n\t\t\tvar n = document_listeners.get(event_name);\n\n\t\t\tif (n === undefined) {\n\t\t\t\t// The document listener ensures we catch events that originate from elements that were\n\t\t\t\t// manually moved outside of the container (e.g. via manual portals).\n\t\t\t\tdocument.addEventListener(event_name, handle_event_propagation, { passive });\n\t\t\t\tdocument_listeners.set(event_name, 1);\n\t\t\t} else {\n\t\t\t\tdocument_listeners.set(event_name, n + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tevent_handle(array_from(all_registered_events));\n\troot_event_handles.add(event_handle);\n\n\t/** @type {Exports} */\n\t// @ts-expect-error will be defined because the render effect runs synchronously\n\tvar component = undefined;\n\n\tvar unmount = component_root(() => {\n\t\tvar anchor_node = anchor ?? target.appendChild(create_text());\n\n\t\tboundary(\n\t\t\t/** @type {TemplateNode} */ (anchor_node),\n\t\t\t{\n\t\t\t\tpending: () => {}\n\t\t\t},\n\t\t\t(anchor_node) => {\n\t\t\t\tif (context) {\n\t\t\t\t\tpush({});\n\t\t\t\t\tvar ctx = /** @type {ComponentContext} */ (component_context);\n\t\t\t\t\tctx.c = context;\n\t\t\t\t}\n\n\t\t\t\tif (events) {\n\t\t\t\t\t// We can't spread the object or else we'd lose the state proxy stuff, if it is one\n\t\t\t\t\t/** @type {any} */ (props).$$events = events;\n\t\t\t\t}\n\n\t\t\t\tif (hydrating) {\n\t\t\t\t\tassign_nodes(/** @type {TemplateNode} */ (anchor_node), null);\n\t\t\t\t}\n\n\t\t\t\tshould_intro = intro;\n\t\t\t\t// @ts-expect-error the public typings are not what the actual function looks like\n\t\t\t\tcomponent = Component(anchor_node, props) || {};\n\t\t\t\tshould_intro = true;\n\n\t\t\t\tif (hydrating) {\n\t\t\t\t\t/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thydrate_node === null ||\n\t\t\t\t\t\thydrate_node.nodeType !== COMMENT_NODE ||\n\t\t\t\t\t\t/** @type {Comment} */ (hydrate_node).data !== HYDRATION_END\n\t\t\t\t\t) {\n\t\t\t\t\t\tw.hydration_mismatch();\n\t\t\t\t\t\tthrow HYDRATION_ERROR;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (context) {\n\t\t\t\t\tpop();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\treturn () => {\n\t\t\tfor (var event_name of registered_events) {\n\t\t\t\ttarget.removeEventListener(event_name, handle_event_propagation);\n\n\t\t\t\tvar n = /** @type {number} */ (document_listeners.get(event_name));\n\n\t\t\t\tif (--n === 0) {\n\t\t\t\t\tdocument.removeEventListener(event_name, handle_event_propagation);\n\t\t\t\t\tdocument_listeners.delete(event_name);\n\t\t\t\t} else {\n\t\t\t\t\tdocument_listeners.set(event_name, n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troot_event_handles.delete(event_handle);\n\n\t\t\tif (anchor_node !== anchor) {\n\t\t\t\tanchor_node.parentNode?.removeChild(anchor_node);\n\t\t\t}\n\t\t};\n\t});\n\n\tmounted_components.set(component, unmount);\n\treturn component;\n}\n\n/**\n * References of the components that were mounted or hydrated.\n * Uses a `WeakMap` to avoid memory leaks.\n */\nlet mounted_components = new WeakMap();\n\n/**\n * Unmounts a component that was previously mounted using `mount` or `hydrate`.\n *\n * Since 5.13.0, if `options.outro` is `true`, [transitions](https://svelte.dev/docs/svelte/transition) will play before the component is removed from the DOM.\n *\n * Returns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).\n *\n * ```js\n * import { mount, unmount } from 'svelte';\n * import App from './App.svelte';\n *\n * const app = mount(App, { target: document.body });\n *\n * // later...\n * unmount(app, { outro: true });\n * ```\n * @param {Record<string, any>} component\n * @param {{ outro?: boolean }} [options]\n * @returns {Promise<void>}\n */\nexport function unmount(component, options) {\n\tconst fn = mounted_components.get(component);\n\n\tif (fn) {\n\t\tmounted_components.delete(component);\n\t\treturn fn(options);\n\t}\n\n\tif (DEV) {\n\t\tif (STATE_SYMBOL in component) {\n\t\t\tw.state_proxy_unmount();\n\t\t} else {\n\t\t\tw.lifecycle_double_unmount();\n\t\t}\n\t}\n\n\treturn Promise.resolve();\n}\n","/**\n * Arizona Svelte Lifecycle Management\n * Handles automatic mounting, unmounting, and monitoring of Svelte components\n * in response to DOM changes. Integrates with Arizona Framework's real-time updates.\n *\n * @example\n * const lifecycle = new ArizonaSvelteLifecycle(registry);\n * lifecycle.startMonitoring({\n *   autoMount: true,\n *   autoUnmount: true,\n *   debounceMs: 0\n * });\n */\n\nimport { mount, unmount } from 'svelte';\n\n/**\n * Lifecycle manager for Svelte components\n */\nclass ArizonaSvelteLifecycle {\n  /**\n   * Create a new lifecycle manager\n   * @param {ArizonaSvelteRegistry} registry - Component registry instance\n   * @param {Object} [options={}] - Lifecycle options\n   * @param {boolean} [options.autoMount=true] - Automatically mount new components\n   * @param {boolean} [options.autoUnmount=true] - Automatically unmount removed components\n   * @param {boolean} [options.observeSubtree=true] - Monitor entire DOM tree\n   * @param {number} [options.debounceMs=0] - Debounce delay in milliseconds\n   * @throws {Error} If registry is not provided\n   */\n  constructor(registry, options = {}) {\n    if (!registry) {\n      throw new Error('ArizonaSvelteLifecycle requires a registry instance');\n    }\n\n    this.registry = registry;\n    this.mountedComponents = new Map(); // target -> component instance\n    this.observers = new Set(); // Set of active observers\n    this.isMonitoring = false;\n    this.options = {\n      autoMount: options.autoMount !== false, // Default true\n      autoUnmount: options.autoUnmount !== false, // Default true\n      observeSubtree: options.observeSubtree !== false, // Default true\n      debounceMs: options.debounceMs || 0, // Debounce DOM changes\n      ...options,\n    };\n    this.debounceTimer = null;\n  }\n\n  /**\n   * Mount Svelte components from DOM data attributes\n   * Searches for elements with data-svelte-component attribute and mounts the corresponding components\n   * @returns {Promise<number>} Number of components successfully mounted\n   * @example\n   * // HTML: <div data-svelte-component=\"Counter\" data-svelte-props='{\"count\": 0}'></div>\n   * const mounted = await lifecycle.mountComponents();\n   */\n  async mountComponents() {\n    const svelteTargets = document.querySelectorAll('[data-svelte-component]');\n    let mountedCount = 0;\n\n    svelteTargets.forEach((target) => {\n      // Skip if already mounted\n      if (this.mountedComponents.has(target)) {\n        return;\n      }\n\n      const componentName = target.dataset.svelteComponent;\n      const props = target.dataset.svelteProps ? JSON.parse(target.dataset.svelteProps) : {};\n\n      const ComponentClass = this.registry.getComponent(componentName);\n\n      if (ComponentClass) {\n        try {\n          const instance = mount(ComponentClass, { target, props });\n          this.mountedComponents.set(target, instance);\n          mountedCount++;\n          console.log(`[Arizona Svelte] ✅ Mounted '${componentName}' component`, {\n            target: target.id || target.className || 'unnamed',\n            props,\n            totalMounted: this.mountedComponents.size,\n          });\n        } catch (error) {\n          console.error(`[Arizona Svelte] ❌ Failed to mount component '${componentName}':`, error);\n        }\n      } else {\n        console.warn(`[Arizona Svelte] Component '${componentName}' not found in registry`);\n      }\n    });\n\n    if (mountedCount > 0) {\n      console.log(`[Arizona Svelte] Mounted ${mountedCount} components`);\n    }\n    return mountedCount;\n  }\n\n  /**\n   * Unmount a specific component\n   * @param {Element} target - DOM element containing the component\n   * @returns {boolean} True if component was unmounted, false if not found\n   */\n  unmountComponent(target) {\n    const instance = this.mountedComponents.get(target);\n\n    if (instance) {\n      try {\n        const componentName = target.dataset.svelteComponent || 'unknown';\n        unmount(instance);\n        this.mountedComponents.delete(target);\n        console.log(`[Arizona Svelte] 🗑️ Unmounted '${componentName}' component`, {\n          target: target.id || target.className || 'unnamed',\n          totalMounted: this.mountedComponents.size,\n        });\n        return true;\n      } catch (error) {\n        console.error(`[Arizona Svelte] ❌ Failed to unmount component:`, error);\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Unmount all mounted components\n   * @returns {number} Number of components unmounted\n   */\n  unmountAllComponents() {\n    let unmountedCount = 0;\n\n    this.mountedComponents.forEach((_instance, target) => {\n      if (this.unmountComponent(target)) {\n        unmountedCount++;\n      }\n    });\n\n    console.log(`[Arizona Svelte] Unmounted ${unmountedCount} components`);\n    return unmountedCount;\n  }\n\n  /**\n   * Remount components (useful for updates)\n   * @returns {Promise<number>} Number of components remounted\n   */\n  async remountComponents() {\n    this.unmountAllComponents();\n    return await this.mountComponents();\n  }\n\n  /**\n   * Get mounted component instance by target\n   * @param {Element} target - DOM element\n   * @returns {Object|null} Component instance or null if not found\n   */\n  getMountedComponent(target) {\n    return this.mountedComponents.get(target) || null;\n  }\n\n  /**\n   * Get all mounted components\n   * @returns {Map} Map of target elements to component instances\n   */\n  getAllMountedComponents() {\n    return new Map(this.mountedComponents);\n  }\n\n  /**\n   * Check if a target has a mounted component\n   * @param {Element} target - DOM element\n   * @returns {boolean}\n   */\n  isComponentMounted(target) {\n    return this.mountedComponents.has(target);\n  }\n\n  /**\n   * Start automatic monitoring for component lifecycle\n   * @returns {void}\n   */\n  startMonitoring() {\n    if (this.isMonitoring) {\n      console.warn('[Arizona Svelte] Monitoring already started');\n      return;\n    }\n\n    this.isMonitoring = true;\n    console.log('[Arizona Svelte] Starting automatic component monitoring');\n\n    // Initial mount\n    if (this.options.autoMount) {\n      this.mountComponents();\n    }\n\n    // Set up DOM mutation observer\n    this.setupDOMObserver();\n\n    // Set up Arizona WebSocket listener\n    this.setupArizonaListener();\n\n    // Set up page visibility listener\n    this.setupVisibilityListener();\n\n    // Set up cleanup on page unload\n    this.setupUnloadListener();\n  }\n\n  /**\n   * Stop automatic monitoring\n   * @returns {void}\n   */\n  stopMonitoring() {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = false;\n    console.log('[Arizona Svelte] Stopping automatic component monitoring');\n\n    // Clean up all observers\n    this.observers.forEach((observer) => {\n      if (observer.disconnect) {\n        observer.disconnect();\n      } else if (typeof observer === 'function') {\n        observer(); // Cleanup function\n      }\n    });\n    this.observers.clear();\n\n    // Clear debounce timer\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer);\n      this.debounceTimer = null;\n    }\n  }\n\n  /**\n   * Setup DOM mutation observer to detect component additions/removals\n   * @private\n   */\n  setupDOMObserver() {\n    const observer = new MutationObserver((mutations) => {\n      this.debouncedHandleMutations(mutations);\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: this.options.observeSubtree,\n      attributes: true,\n      attributeFilter: ['data-svelte-component', 'data-svelte-props'],\n    });\n\n    this.observers.add(observer);\n  }\n\n  /**\n   * Setup Arizona WebSocket event listener for patches\n   * @private\n   */\n  setupArizonaListener() {\n    const handleArizonaEvent = (event) => {\n      if (event.detail.type === 'html_patch') {\n        // When Arizona applies HTML patches, we need to check for new components\n        this.debouncedScanAndMount();\n      }\n    };\n\n    document.addEventListener('arizonaEvent', handleArizonaEvent);\n\n    // Return cleanup function\n    const cleanup = () => {\n      document.removeEventListener('arizonaEvent', handleArizonaEvent);\n    };\n\n    this.observers.add(cleanup);\n  }\n\n  /**\n   * Setup page visibility listener to pause/resume components\n   * @private\n   */\n  setupVisibilityListener() {\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log('[Arizona Svelte] Page hidden - components may pause updates');\n      } else {\n        console.log('[Arizona Svelte] Page visible - checking for component updates');\n        this.debouncedScanAndMount();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    const cleanup = () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n\n    this.observers.add(cleanup);\n  }\n\n  /**\n   * Setup page unload listener for cleanup\n   * @private\n   */\n  setupUnloadListener() {\n    const handleUnload = () => {\n      console.log('[Arizona Svelte] Page unloading - cleaning up components');\n      if (this.options.autoUnmount) {\n        this.unmountAllComponents();\n      }\n      this.stopMonitoring();\n    };\n\n    window.addEventListener('beforeunload', handleUnload);\n    window.addEventListener('unload', handleUnload);\n\n    const cleanup = () => {\n      window.removeEventListener('beforeunload', handleUnload);\n      window.removeEventListener('unload', handleUnload);\n    };\n\n    this.observers.add(cleanup);\n  }\n\n  /**\n   * Debounced mutation handler to avoid excessive re-scanning\n   * @private\n   */\n  debouncedHandleMutations(mutations) {\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer);\n    }\n\n    this.debounceTimer = setTimeout(() => {\n      this.handleMutations(mutations);\n    }, this.options.debounceMs);\n  }\n\n  /**\n   * Debounced scan and mount to avoid excessive operations\n   * @private\n   */\n  debouncedScanAndMount() {\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer);\n    }\n\n    this.debounceTimer = setTimeout(() => {\n      this.scanAndMount();\n    }, this.options.debounceMs);\n  }\n\n  /**\n   * Handle DOM mutations and update components accordingly\n   * @private\n   */\n  handleMutations(mutations) {\n    let shouldScan = false;\n    const removedNodes = new Set();\n\n    mutations.forEach((mutation) => {\n      // Handle removed nodes\n      if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {\n        mutation.removedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            removedNodes.add(node);\n            // Check if removed node or its children had mounted components\n            this.unmountRemovedComponents(node);\n          }\n        });\n      }\n\n      // Handle added nodes or attribute changes\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n        shouldScan = true;\n      } else if (\n        mutation.type === 'attributes' &&\n        (mutation.attributeName === 'data-svelte-component' ||\n          mutation.attributeName === 'data-svelte-props')\n      ) {\n        shouldScan = true;\n      }\n    });\n\n    if (shouldScan && this.options.autoMount) {\n      this.scanAndMount();\n    }\n  }\n\n  /**\n   * Scan for new components and mount them\n   * @private\n   */\n  async scanAndMount() {\n    try {\n      const mounted = await this.mountComponents();\n      if (mounted > 0) {\n        console.log(`[Arizona Svelte] 🔄 Auto-mounted ${mounted} new components`);\n      }\n    } catch (error) {\n      console.error('[Arizona Svelte] Error during auto-mount:', error);\n    }\n  }\n\n  /**\n   * Unmount components that were removed from DOM\n   * @private\n   */\n  unmountRemovedComponents(removedNode) {\n    if (!this.options.autoUnmount) {\n      return;\n    }\n\n    // Check if the removed node itself was a component target\n    if (this.mountedComponents.has(removedNode)) {\n      console.log('[Arizona Svelte] Auto-unmounting removed component');\n      this.unmountComponent(removedNode);\n    }\n\n    // Check children of removed node\n    if (removedNode.querySelectorAll) {\n      const childTargets = removedNode.querySelectorAll('[data-svelte-component]');\n      childTargets.forEach((target) => {\n        if (this.mountedComponents.has(target)) {\n          console.log('[Arizona Svelte] Auto-unmounting removed child component');\n          this.unmountComponent(target);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get monitoring status\n   * @returns {boolean}\n   */\n  isMonitoringActive() {\n    return this.isMonitoring;\n  }\n\n  /**\n   * Get current monitoring options\n   * @returns {Object}\n   */\n  getMonitoringOptions() {\n    return { ...this.options };\n  }\n\n  /**\n   * Update monitoring options\n   * @param {Object} newOptions - New options to merge\n   */\n  updateMonitoringOptions(newOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n}\n\nexport { ArizonaSvelteLifecycle };\n","/**\n * Arizona Svelte Integration\n * Main class for Svelte component management with automatic lifecycle monitoring\n *\n * @example\n * import ArizonaSvelte from '@arizona-framework/svelte';\n * import Counter from './svelte/components/Counter.svelte';\n * import HelloWorld from './svelte/components/HelloWorld.svelte';\n *\n * // Option 1: Register components in constructor\n * const arizonaSvelte = new ArizonaSvelte({\n *   components: {\n *     Counter,\n *     HelloWorld\n *   }\n * });\n *\n * // Option 2: Register components later\n * const arizonaSvelte = new ArizonaSvelte();\n * arizonaSvelte.registerComponents({ Counter, HelloWorld });\n *\n * // Start monitoring\n * arizonaSvelte.startMonitoring();\n */\n\nimport { ArizonaSvelteRegistry } from './arizona-svelte-registry.js';\nimport { ArizonaSvelteLifecycle } from './arizona-svelte-lifecycle.js';\n\n/**\n * Main Arizona Svelte integration class\n */\nclass ArizonaSvelte {\n  /**\n   * Create a new ArizonaSvelte instance\n   * @param {Object} [options={}] - Configuration options\n   * @param {Object.<string, Function>} [options.components] - Components to register on instantiation\n   */\n  constructor(options = {}) {\n    this.registry = new ArizonaSvelteRegistry();\n    this.lifecycle = new ArizonaSvelteLifecycle(this.registry, options);\n\n    // Register components if provided\n    if (options.components) {\n      this.registerComponents(options.components);\n    }\n  }\n\n  /**\n   * Get a component by name\n   * @param {string} name - Component name\n   * @returns {Function|null} Svelte component class or null if not found\n   */\n  getComponent(name) {\n    return this.registry.getComponent(name);\n  }\n\n  /**\n   * Check if a component is registered\n   * @param {string} name - Component name\n   * @returns {boolean}\n   */\n  hasComponent(name) {\n    return this.registry.hasComponent(name);\n  }\n\n  /**\n   * Get all registered component names\n   * @returns {string[]}\n   */\n  getComponentNames() {\n    return this.registry.getComponentNames();\n  }\n\n  /**\n   * Get the registry instance\n   * @returns {ArizonaSvelteRegistry}\n   */\n  getRegistry() {\n    return this.registry;\n  }\n\n  /**\n   * Get the lifecycle instance\n   * @returns {ArizonaSvelteLifecycle}\n   */\n  getLifecycle() {\n    return this.lifecycle;\n  }\n\n  /**\n   * Mount Svelte components from DOM\n   * @returns {Promise<number>} Number of components mounted\n   */\n  async mountComponents() {\n    return await this.lifecycle.mountComponents();\n  }\n\n  /**\n   * Start automatic monitoring for component lifecycle\n   * This will automatically mount/unmount components when DOM changes\n   * @param {Object} [options={}] - Monitoring options\n   * @param {boolean} [options.autoMount=true] - Automatically mount new components\n   * @param {boolean} [options.autoUnmount=true] - Automatically unmount removed components\n   * @param {boolean} [options.observeSubtree=true] - Monitor entire DOM tree\n   * @param {number} [options.debounceMs=0] - Debounce delay in milliseconds\n   * @returns {Promise<void>}\n   * @example\n   * arizonaSvelte.startMonitoring({\n   *   autoMount: true,\n   *   autoUnmount: true,\n   *   debounceMs: 0\n   * });\n   */\n  async startMonitoring(options = {}) {\n    this.lifecycle.updateMonitoringOptions(options);\n    this.lifecycle.startMonitoring();\n  }\n\n  /**\n   * Stop automatic monitoring\n   * @returns {void}\n   */\n  stopMonitoring() {\n    this.lifecycle.stopMonitoring();\n  }\n\n  /**\n   * Check if monitoring is active\n   * @returns {boolean}\n   */\n  isMonitoring() {\n    return this.lifecycle.isMonitoringActive();\n  }\n\n  /**\n   * Register multiple components at once\n   * @param {Object.<string, Function>} components - Object mapping component names to component classes\n   * @returns {number} Number of components registered\n   * @example\n   * arizonaSvelte.registerComponents({\n   *   Counter: CounterComponent,\n   *   HelloWorld: HelloWorldComponent,\n   *   Dashboard: DashboardComponent\n   * });\n   */\n  registerComponents(components) {\n    return this.registry.registerComponents(components);\n  }\n}\n\nexport default ArizonaSvelte;\n"],"names":["ArizonaSvelteRegistry","name","component","components","registeredCount","DEV","is_array","index_of","array_from","define_property","get_descriptor","object_prototype","array_prototype","get_prototype_of","is_extensible","run_all","arr","i","deferred","resolve","reject","promise","res","rej","DERIVED","EFFECT","RENDER_EFFECT","BLOCK_EFFECT","BRANCH_EFFECT","ROOT_EFFECT","BOUNDARY_EFFECT","UNOWNED","DISCONNECTED","CLEAN","DIRTY","MAYBE_DIRTY","INERT","DESTROYED","EFFECT_RAN","EFFECT_TRANSPARENT","INSPECT_EFFECT","HEAD_EFFECT","EFFECT_PRESERVED","USER_EFFECT","REACTION_IS_UPDATING","ASYNC","ERROR_VALUE","STATE_SYMBOL","STALE_REACTION","effect_update_depth_exceeded","state_descriptors_fixed","state_prototype_fixed","state_unsafe_mutation","svelte_boundary_reset_onerror","UNINITIALIZED","svelte_boundary_reset_noop","equals","value","tracing_mode_flag","component_context","set_component_context","context","push","props","runes","fn","pop","effects","create_user_effect","is_runes","micro_tasks","run_micro_tasks","tasks","queue_micro_task","adjustments","handle_error","error","effect","active_effect","active_reaction","apply_adjustments","invoke_error_boundary","e","adjusted","batches","current_batch","effect_pending_updates","queued_root_effects","last_scheduled_effect","is_flushing","Batch","#previous","#callbacks","#pending","#deferred","#neutered","#async_effects","#boundary_async_effects","#render_effects","#effects","#block_effects","#dirty_effects","#maybe_dirty_effects","root_effects","root","#traverse_effect_tree","#commit","render_effects","flush_queued_effects","#defer_effects","update_effect","flags","is_branch","is_skippable_branch","skip","is_dirty","child","parent","set_signal_status","source","update","flush_effects","schedule_effect","batch","task","was_updating_effect","is_updating_effect","flush_count","set_is_updating_effect","updates","entry","infinite_loop_guard","old_values","e.effect_update_depth_exceeded","eager_block_effects","length","unlink_effect","signal","createSubscriber","start","subscribers","version","stop","effect_tracking","get","render_effect","untrack","increment","boundary","node","children","Boundary","#anchor","#hydrate_open","#props","#children","#effect","#main_effect","#pending_effect","#failed_effect","#offscreen_fragment","#local_pending_count","#pending_count","#is_creating_fallback","#effect_pending","#effect_pending_update","internal_set","#effect_pending_subscriber","block","branch","#show_pending_snippet","#hydrate_resolved_content","#hydrate_pending_content","pending","#run","pause_effect","previous_effect","previous_reaction","previous_ctx","set_active_effect","set_active_reaction","move_effect","#update_pending_count","d","onerror","failed","destroy_effect","did_reset","calling_on_error","reset","w.svelte_boundary_reset_noop","e.svelte_boundary_reset_onerror","fragment","end","next","get_next_sibling","destroy_derived_effects","derived","get_derived_parent_effect","execute_derived","prev_active_effect","update_reaction","update_derived","increment_write_version","is_destroying_effect","status","skip_reaction","v","stack","state","s","push_reaction_value","set","should_proxy","untracking","current_sources","e.state_unsafe_mutation","new_value","proxy","old_value","mark_reactions","untracked_writes","set_untracked_writes","reactions","reaction","not_dirty","prototype","sources","is_proxied_array","parent_version","update_version","with_parent","set_update_version","result","_","prop","descriptor","e.state_descriptors_fixed","target","receiver","exists","p","has","other_s","ls","n","own_keys","key","e.state_prototype_fixed","$window","next_sibling_getter","init_operations","element_prototype","node_prototype","text_prototype","create_text","without_reactive_context","push_effect","parent_effect","parent_last","create_effect","type","sync","component_root","options","fulfil","execute_effect_teardown","teardown","previously_destroying_effect","set_is_destroying_effect","destroy_effect_children","remove_dom","controller","destroy_block_effect_children","removed","remove_effect_dom","remove_reactions","transitions","transition","prev","callback","pause_children","run_out_transitions","remaining","check","local","sibling","transparent","new_deps","skipped_deps","write_version","read_version","dependencies","is_unowned","dependency","is_disconnected","is_unowned_connected","schedule_possible_effect_self_invalidation","previous_deps","previous_skipped_deps","previous_untracked_writes","previous_skip_reaction","previous_sources","previous_component_context","previous_untracking","previous_update_version","deps","remove_reaction","index","new_length","start_index","dep","is_derived","destroyed","depends_on_old_values","STATUS_MASK","PASSIVE_EVENTS","is_passive_event","all_registered_events","root_event_handles","last_propagated_event","handle_event_propagation","event","handler_element","owner_document","event_name","path","current_target","path_idx","handled_at","at_idx","handler_idx","throw_error","other_errors","parent_element","delegated","data","mount","_mount","document_listeners","Component","anchor","events","intro","registered_events","event_handle","passive","unmount","anchor_node","ctx","mounted_components","ArizonaSvelteLifecycle","registry","svelteTargets","mountedCount","componentName","ComponentClass","instance","unmountedCount","_instance","observer","mutations","handleArizonaEvent","cleanup","handleVisibilityChange","handleUnload","shouldScan","removedNodes","mutation","mounted","removedNode","newOptions","ArizonaSvelte"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}